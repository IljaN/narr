// Code generated by cdpgen. DO NOT EDIT.

// Package performancetimeline implements the PerformanceTimeline domain.
// Reporting of performance timeline events, as specified in
// https://w3c.github.io/performance-timeline/#dom-performanceobserver.
package performancetimeline

import (
	"context"

	"github.com/mafredri/cdp/protocol/internal"
	"github.com/mafredri/cdp/rpcc"
)

// domainClient is a client for the PerformanceTimeline domain. Reporting of
// performance timeline events, as specified in
// https://w3c.github.io/performance-timeline/#dom-performanceobserver.
type domainClient struct{ conn *rpcc.Conn }

// NewClient returns a client for the PerformanceTimeline domain with the connection set to conn.
func NewClient(conn *rpcc.Conn) *domainClient {
	return &domainClient{conn: conn}
}

// Enable invokes the PerformanceTimeline method. Previously buffered events
// would be reported before method returns. See also: timelineEventAdded
func (d *domainClient) Enable(ctx context.Context, args *EnableArgs) (err error) {
	if args != nil {
		err = rpcc.Invoke(ctx, "PerformanceTimeline.enable", args, nil, d.conn)
	} else {
		err = rpcc.Invoke(ctx, "PerformanceTimeline.enable", nil, nil, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "PerformanceTimeline", Op: "Enable", Err: err}
	}
	return
}

func (d *domainClient) TimelineEventAdded(ctx context.Context) (TimelineEventAddedClient, error) {
	s, err := rpcc.NewStream(ctx, "PerformanceTimeline.timelineEventAdded", d.conn)
	if err != nil {
		return nil, err
	}
	return &timelineEventAddedClient{Stream: s}, nil
}

type timelineEventAddedClient struct{ rpcc.Stream }

// GetStream returns the original Stream for use with cdp.Sync.
func (c *timelineEventAddedClient) GetStream() rpcc.Stream { return c.Stream }

func (c *timelineEventAddedClient) Recv() (*TimelineEventAddedReply, error) {
	event := new(TimelineEventAddedReply)
	if err := c.RecvMsg(event); err != nil {
		return nil, &internal.OpError{Domain: "PerformanceTimeline", Op: "TimelineEventAdded Recv", Err: err}
	}
	return event, nil
}
