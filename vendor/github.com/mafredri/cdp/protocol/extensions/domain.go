// Code generated by cdpgen. DO NOT EDIT.

// Package extensions implements the Extensions domain. Defines commands and
// events for browser extensions.
package extensions

import (
	"context"

	"github.com/mafredri/cdp/protocol/internal"
	"github.com/mafredri/cdp/rpcc"
)

// domainClient is a client for the Extensions domain. Defines commands and
// events for browser extensions.
type domainClient struct{ conn *rpcc.Conn }

// NewClient returns a client for the Extensions domain with the connection set to conn.
func NewClient(conn *rpcc.Conn) *domainClient {
	return &domainClient{conn: conn}
}

// LoadUnpacked invokes the Extensions method. Installs an unpacked extension
// from the filesystem similar to --load-extension CLI flags. Returns extension
// ID once the extension has been installed. Available if the client is
// connected using the --remote-debugging-pipe flag and the
// --enable-unsafe-extension-debugging flag is set.
func (d *domainClient) LoadUnpacked(ctx context.Context, args *LoadUnpackedArgs) (reply *LoadUnpackedReply, err error) {
	reply = new(LoadUnpackedReply)
	if args != nil {
		err = rpcc.Invoke(ctx, "Extensions.loadUnpacked", args, reply, d.conn)
	} else {
		err = rpcc.Invoke(ctx, "Extensions.loadUnpacked", nil, reply, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "Extensions", Op: "LoadUnpacked", Err: err}
	}
	return
}

// GetStorageItems invokes the Extensions method. Gets data from extension
// storage in the given `storageArea`. If `keys` is specified, these are used
// to filter the result.
func (d *domainClient) GetStorageItems(ctx context.Context, args *GetStorageItemsArgs) (reply *GetStorageItemsReply, err error) {
	reply = new(GetStorageItemsReply)
	if args != nil {
		err = rpcc.Invoke(ctx, "Extensions.getStorageItems", args, reply, d.conn)
	} else {
		err = rpcc.Invoke(ctx, "Extensions.getStorageItems", nil, reply, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "Extensions", Op: "GetStorageItems", Err: err}
	}
	return
}

// RemoveStorageItems invokes the Extensions method. Removes `keys` from
// extension storage in the given `storageArea`.
func (d *domainClient) RemoveStorageItems(ctx context.Context, args *RemoveStorageItemsArgs) (err error) {
	if args != nil {
		err = rpcc.Invoke(ctx, "Extensions.removeStorageItems", args, nil, d.conn)
	} else {
		err = rpcc.Invoke(ctx, "Extensions.removeStorageItems", nil, nil, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "Extensions", Op: "RemoveStorageItems", Err: err}
	}
	return
}

// ClearStorageItems invokes the Extensions method. Clears extension storage
// in the given `storageArea`.
func (d *domainClient) ClearStorageItems(ctx context.Context, args *ClearStorageItemsArgs) (err error) {
	if args != nil {
		err = rpcc.Invoke(ctx, "Extensions.clearStorageItems", args, nil, d.conn)
	} else {
		err = rpcc.Invoke(ctx, "Extensions.clearStorageItems", nil, nil, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "Extensions", Op: "ClearStorageItems", Err: err}
	}
	return
}

// SetStorageItems invokes the Extensions method. Sets `values` in extension
// storage in the given `storageArea`. The provided `values` will be merged
// with existing values in the storage area.
func (d *domainClient) SetStorageItems(ctx context.Context, args *SetStorageItemsArgs) (err error) {
	if args != nil {
		err = rpcc.Invoke(ctx, "Extensions.setStorageItems", args, nil, d.conn)
	} else {
		err = rpcc.Invoke(ctx, "Extensions.setStorageItems", nil, nil, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "Extensions", Op: "SetStorageItems", Err: err}
	}
	return
}
