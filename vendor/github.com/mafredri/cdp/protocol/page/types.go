// Code generated by cdpgen. DO NOT EDIT.

package page

import (
	"github.com/mafredri/cdp/protocol/internal"
	"github.com/mafredri/cdp/protocol/network"
	"github.com/mafredri/cdp/protocol/runtime"
)

// FrameID Unique frame identifier.
type FrameID = internal.PageFrameID

// AdFrameType Indicates whether a frame has been identified as an ad.
//
// Note: This type is experimental.
type AdFrameType string

// AdFrameType as enums.
const (
	AdFrameTypeNotSet AdFrameType = ""
	AdFrameTypeNone   AdFrameType = "none"
	AdFrameTypeChild  AdFrameType = "child"
	AdFrameTypeRoot   AdFrameType = "root"
)

func (e AdFrameType) Valid() bool {
	switch e {
	case "none", "child", "root":
		return true
	default:
		return false
	}
}

func (e AdFrameType) String() string {
	return string(e)
}

// AdFrameExplanation
//
// Note: This type is experimental.
type AdFrameExplanation string

// AdFrameExplanation as enums.
const (
	AdFrameExplanationNotSet              AdFrameExplanation = ""
	AdFrameExplanationParentIsAd          AdFrameExplanation = "ParentIsAd"
	AdFrameExplanationCreatedByAdScript   AdFrameExplanation = "CreatedByAdScript"
	AdFrameExplanationMatchedBlockingRule AdFrameExplanation = "MatchedBlockingRule"
)

func (e AdFrameExplanation) Valid() bool {
	switch e {
	case "ParentIsAd", "CreatedByAdScript", "MatchedBlockingRule":
		return true
	default:
		return false
	}
}

func (e AdFrameExplanation) String() string {
	return string(e)
}

// AdFrameStatus Indicates whether a frame has been identified as an ad and
// why.
//
// Note: This type is experimental.
type AdFrameStatus struct {
	AdFrameType  AdFrameType          `json:"adFrameType"`            // No description.
	Explanations []AdFrameExplanation `json:"explanations,omitempty"` // No description.
}

// AdScriptID Identifies the bottom-most script which caused the frame to be
// labeled as an ad.
//
// Note: This type is experimental.
type AdScriptID struct {
	ScriptID   runtime.ScriptID         `json:"scriptId"`   // Script Id of the bottom-most script which caused the frame to be labeled as an ad.
	DebuggerID runtime.UniqueDebuggerID `json:"debuggerId"` // Id of adScriptId's debugger.
}

// SecureContextType Indicates whether the frame is a secure context and why
// it is the case.
//
// Note: This type is experimental.
type SecureContextType string

// SecureContextType as enums.
const (
	SecureContextTypeNotSet           SecureContextType = ""
	SecureContextTypeSecure           SecureContextType = "Secure"
	SecureContextTypeSecureLocalhost  SecureContextType = "SecureLocalhost"
	SecureContextTypeInsecureScheme   SecureContextType = "InsecureScheme"
	SecureContextTypeInsecureAncestor SecureContextType = "InsecureAncestor"
)

func (e SecureContextType) Valid() bool {
	switch e {
	case "Secure", "SecureLocalhost", "InsecureScheme", "InsecureAncestor":
		return true
	default:
		return false
	}
}

func (e SecureContextType) String() string {
	return string(e)
}

// CrossOriginIsolatedContextType Indicates whether the frame is cross-origin
// isolated and why it is the case.
//
// Note: This type is experimental.
type CrossOriginIsolatedContextType string

// CrossOriginIsolatedContextType as enums.
const (
	CrossOriginIsolatedContextTypeNotSet                     CrossOriginIsolatedContextType = ""
	CrossOriginIsolatedContextTypeIsolated                   CrossOriginIsolatedContextType = "Isolated"
	CrossOriginIsolatedContextTypeNotIsolated                CrossOriginIsolatedContextType = "NotIsolated"
	CrossOriginIsolatedContextTypeNotIsolatedFeatureDisabled CrossOriginIsolatedContextType = "NotIsolatedFeatureDisabled"
)

func (e CrossOriginIsolatedContextType) Valid() bool {
	switch e {
	case "Isolated", "NotIsolated", "NotIsolatedFeatureDisabled":
		return true
	default:
		return false
	}
}

func (e CrossOriginIsolatedContextType) String() string {
	return string(e)
}

// GatedAPIFeatures
//
// Note: This type is experimental.
type GatedAPIFeatures string

// GatedAPIFeatures as enums.
const (
	GatedAPIFeaturesNotSet                            GatedAPIFeatures = ""
	GatedAPIFeaturesSharedArrayBuffers                GatedAPIFeatures = "SharedArrayBuffers"
	GatedAPIFeaturesSharedArrayBuffersTransferAllowed GatedAPIFeatures = "SharedArrayBuffersTransferAllowed"
	GatedAPIFeaturesPerformanceMeasureMemory          GatedAPIFeatures = "PerformanceMeasureMemory"
	GatedAPIFeaturesPerformanceProfile                GatedAPIFeatures = "PerformanceProfile"
)

func (e GatedAPIFeatures) Valid() bool {
	switch e {
	case "SharedArrayBuffers", "SharedArrayBuffersTransferAllowed", "PerformanceMeasureMemory", "PerformanceProfile":
		return true
	default:
		return false
	}
}

func (e GatedAPIFeatures) String() string {
	return string(e)
}

// PermissionsPolicyFeature All Permissions Policy features. This enum should
// match the one defined in
// third_party/blink/renderer/core/permissions_policy/permissions_policy_features.json5.
//
// Note: This type is experimental.
type PermissionsPolicyFeature string

// PermissionsPolicyFeature as enums.
const (
	PermissionsPolicyFeatureNotSet                       PermissionsPolicyFeature = ""
	PermissionsPolicyFeatureAccelerometer                PermissionsPolicyFeature = "accelerometer"
	PermissionsPolicyFeatureAllScreensCapture            PermissionsPolicyFeature = "all-screens-capture"
	PermissionsPolicyFeatureAmbientLightSensor           PermissionsPolicyFeature = "ambient-light-sensor"
	PermissionsPolicyFeatureAttributionReporting         PermissionsPolicyFeature = "attribution-reporting"
	PermissionsPolicyFeatureAutoplay                     PermissionsPolicyFeature = "autoplay"
	PermissionsPolicyFeatureBluetooth                    PermissionsPolicyFeature = "bluetooth"
	PermissionsPolicyFeatureBrowsingTopics               PermissionsPolicyFeature = "browsing-topics"
	PermissionsPolicyFeatureCamera                       PermissionsPolicyFeature = "camera"
	PermissionsPolicyFeatureCapturedSurfaceControl       PermissionsPolicyFeature = "captured-surface-control"
	PermissionsPolicyFeatureCHDPR                        PermissionsPolicyFeature = "ch-dpr"
	PermissionsPolicyFeatureCHDeviceMemory               PermissionsPolicyFeature = "ch-device-memory"
	PermissionsPolicyFeatureCHDownlink                   PermissionsPolicyFeature = "ch-downlink"
	PermissionsPolicyFeatureCHECT                        PermissionsPolicyFeature = "ch-ect"
	PermissionsPolicyFeatureCHPrefersColorScheme         PermissionsPolicyFeature = "ch-prefers-color-scheme"
	PermissionsPolicyFeatureCHPrefersReducedMotion       PermissionsPolicyFeature = "ch-prefers-reduced-motion"
	PermissionsPolicyFeatureCHPrefersReducedTransparency PermissionsPolicyFeature = "ch-prefers-reduced-transparency"
	PermissionsPolicyFeatureCHRTT                        PermissionsPolicyFeature = "ch-rtt"
	PermissionsPolicyFeatureCHSaveData                   PermissionsPolicyFeature = "ch-save-data"
	PermissionsPolicyFeatureCHUA                         PermissionsPolicyFeature = "ch-ua"
	PermissionsPolicyFeatureCHUAArch                     PermissionsPolicyFeature = "ch-ua-arch"
	PermissionsPolicyFeatureCHUABitness                  PermissionsPolicyFeature = "ch-ua-bitness"
	PermissionsPolicyFeatureCHUAPlatform                 PermissionsPolicyFeature = "ch-ua-platform"
	PermissionsPolicyFeatureCHUAModel                    PermissionsPolicyFeature = "ch-ua-model"
	PermissionsPolicyFeatureCHUAMobile                   PermissionsPolicyFeature = "ch-ua-mobile"
	PermissionsPolicyFeatureCHUAFormFactors              PermissionsPolicyFeature = "ch-ua-form-factors"
	PermissionsPolicyFeatureCHUAFullVersion              PermissionsPolicyFeature = "ch-ua-full-version"
	PermissionsPolicyFeatureCHUAFullVersionList          PermissionsPolicyFeature = "ch-ua-full-version-list"
	PermissionsPolicyFeatureCHUAPlatformVersion          PermissionsPolicyFeature = "ch-ua-platform-version"
	PermissionsPolicyFeatureCHUAWow64                    PermissionsPolicyFeature = "ch-ua-wow64"
	PermissionsPolicyFeatureCHViewportHeight             PermissionsPolicyFeature = "ch-viewport-height"
	PermissionsPolicyFeatureCHViewportWidth              PermissionsPolicyFeature = "ch-viewport-width"
	PermissionsPolicyFeatureCHWidth                      PermissionsPolicyFeature = "ch-width"
	PermissionsPolicyFeatureClipboardRead                PermissionsPolicyFeature = "clipboard-read"
	PermissionsPolicyFeatureClipboardWrite               PermissionsPolicyFeature = "clipboard-write"
	PermissionsPolicyFeatureComputePressure              PermissionsPolicyFeature = "compute-pressure"
	PermissionsPolicyFeatureCrossOriginIsolated          PermissionsPolicyFeature = "cross-origin-isolated"
	PermissionsPolicyFeatureDeferredFetch                PermissionsPolicyFeature = "deferred-fetch"
	PermissionsPolicyFeatureDigitalCredentialsGet        PermissionsPolicyFeature = "digital-credentials-get"
	PermissionsPolicyFeatureDirectSockets                PermissionsPolicyFeature = "direct-sockets"
	PermissionsPolicyFeatureDisplayCapture               PermissionsPolicyFeature = "display-capture"
	PermissionsPolicyFeatureDocumentDomain               PermissionsPolicyFeature = "document-domain"
	PermissionsPolicyFeatureEncryptedMedia               PermissionsPolicyFeature = "encrypted-media"
	PermissionsPolicyFeatureExecutionWhileOutOfViewport  PermissionsPolicyFeature = "execution-while-out-of-viewport"
	PermissionsPolicyFeatureExecutionWhileNotRendered    PermissionsPolicyFeature = "execution-while-not-rendered"
	PermissionsPolicyFeatureFocusWithoutUserActivation   PermissionsPolicyFeature = "focus-without-user-activation"
	PermissionsPolicyFeatureFullscreen                   PermissionsPolicyFeature = "fullscreen"
	PermissionsPolicyFeatureFrobulate                    PermissionsPolicyFeature = "frobulate"
	PermissionsPolicyFeatureGamepad                      PermissionsPolicyFeature = "gamepad"
	PermissionsPolicyFeatureGeolocation                  PermissionsPolicyFeature = "geolocation"
	PermissionsPolicyFeatureGyroscope                    PermissionsPolicyFeature = "gyroscope"
	PermissionsPolicyFeatureHID                          PermissionsPolicyFeature = "hid"
	PermissionsPolicyFeatureIdentityCredentialsGet       PermissionsPolicyFeature = "identity-credentials-get"
	PermissionsPolicyFeatureIdleDetection                PermissionsPolicyFeature = "idle-detection"
	PermissionsPolicyFeatureInterestCohort               PermissionsPolicyFeature = "interest-cohort"
	PermissionsPolicyFeatureJoinAdInterestGroup          PermissionsPolicyFeature = "join-ad-interest-group"
	PermissionsPolicyFeatureKeyboardMap                  PermissionsPolicyFeature = "keyboard-map"
	PermissionsPolicyFeatureLocalFonts                   PermissionsPolicyFeature = "local-fonts"
	PermissionsPolicyFeatureMagnetometer                 PermissionsPolicyFeature = "magnetometer"
	PermissionsPolicyFeatureMediaPlaybackWhileNotVisible PermissionsPolicyFeature = "media-playback-while-not-visible"
	PermissionsPolicyFeatureMicrophone                   PermissionsPolicyFeature = "microphone"
	PermissionsPolicyFeatureMidi                         PermissionsPolicyFeature = "midi"
	PermissionsPolicyFeatureOTPCredentials               PermissionsPolicyFeature = "otp-credentials"
	PermissionsPolicyFeaturePayment                      PermissionsPolicyFeature = "payment"
	PermissionsPolicyFeaturePictureInPicture             PermissionsPolicyFeature = "picture-in-picture"
	PermissionsPolicyFeaturePopins                       PermissionsPolicyFeature = "popins"
	PermissionsPolicyFeaturePrivateAggregation           PermissionsPolicyFeature = "private-aggregation"
	PermissionsPolicyFeaturePrivateStateTokenIssuance    PermissionsPolicyFeature = "private-state-token-issuance"
	PermissionsPolicyFeaturePrivateStateTokenRedemption  PermissionsPolicyFeature = "private-state-token-redemption"
	PermissionsPolicyFeaturePublickeyCredentialsCreate   PermissionsPolicyFeature = "publickey-credentials-create"
	PermissionsPolicyFeaturePublickeyCredentialsGet      PermissionsPolicyFeature = "publickey-credentials-get"
	PermissionsPolicyFeatureRunAdAuction                 PermissionsPolicyFeature = "run-ad-auction"
	PermissionsPolicyFeatureScreenWakeLock               PermissionsPolicyFeature = "screen-wake-lock"
	PermissionsPolicyFeatureSerial                       PermissionsPolicyFeature = "serial"
	PermissionsPolicyFeatureSharedAutofill               PermissionsPolicyFeature = "shared-autofill"
	PermissionsPolicyFeatureSharedStorage                PermissionsPolicyFeature = "shared-storage"
	PermissionsPolicyFeatureSharedStorageSelectURL       PermissionsPolicyFeature = "shared-storage-select-url"
	PermissionsPolicyFeatureSmartCard                    PermissionsPolicyFeature = "smart-card"
	PermissionsPolicyFeatureSpeakerSelection             PermissionsPolicyFeature = "speaker-selection"
	PermissionsPolicyFeatureStorageAccess                PermissionsPolicyFeature = "storage-access"
	PermissionsPolicyFeatureSubApps                      PermissionsPolicyFeature = "sub-apps"
	PermissionsPolicyFeatureSyncXHR                      PermissionsPolicyFeature = "sync-xhr"
	PermissionsPolicyFeatureUnload                       PermissionsPolicyFeature = "unload"
	PermissionsPolicyFeatureUSB                          PermissionsPolicyFeature = "usb"
	PermissionsPolicyFeatureUSBUnrestricted              PermissionsPolicyFeature = "usb-unrestricted"
	PermissionsPolicyFeatureVerticalScroll               PermissionsPolicyFeature = "vertical-scroll"
	PermissionsPolicyFeatureWebAppInstallation           PermissionsPolicyFeature = "web-app-installation"
	PermissionsPolicyFeatureWebPrinting                  PermissionsPolicyFeature = "web-printing"
	PermissionsPolicyFeatureWebShare                     PermissionsPolicyFeature = "web-share"
	PermissionsPolicyFeatureWindowManagement             PermissionsPolicyFeature = "window-management"
	PermissionsPolicyFeatureXrSpatialTracking            PermissionsPolicyFeature = "xr-spatial-tracking"
)

func (e PermissionsPolicyFeature) Valid() bool {
	switch e {
	case "accelerometer", "all-screens-capture", "ambient-light-sensor", "attribution-reporting", "autoplay", "bluetooth", "browsing-topics", "camera", "captured-surface-control", "ch-dpr", "ch-device-memory", "ch-downlink", "ch-ect", "ch-prefers-color-scheme", "ch-prefers-reduced-motion", "ch-prefers-reduced-transparency", "ch-rtt", "ch-save-data", "ch-ua", "ch-ua-arch", "ch-ua-bitness", "ch-ua-platform", "ch-ua-model", "ch-ua-mobile", "ch-ua-form-factors", "ch-ua-full-version", "ch-ua-full-version-list", "ch-ua-platform-version", "ch-ua-wow64", "ch-viewport-height", "ch-viewport-width", "ch-width", "clipboard-read", "clipboard-write", "compute-pressure", "cross-origin-isolated", "deferred-fetch", "digital-credentials-get", "direct-sockets", "display-capture", "document-domain", "encrypted-media", "execution-while-out-of-viewport", "execution-while-not-rendered", "focus-without-user-activation", "fullscreen", "frobulate", "gamepad", "geolocation", "gyroscope", "hid", "identity-credentials-get", "idle-detection", "interest-cohort", "join-ad-interest-group", "keyboard-map", "local-fonts", "magnetometer", "media-playback-while-not-visible", "microphone", "midi", "otp-credentials", "payment", "picture-in-picture", "popins", "private-aggregation", "private-state-token-issuance", "private-state-token-redemption", "publickey-credentials-create", "publickey-credentials-get", "run-ad-auction", "screen-wake-lock", "serial", "shared-autofill", "shared-storage", "shared-storage-select-url", "smart-card", "speaker-selection", "storage-access", "sub-apps", "sync-xhr", "unload", "usb", "usb-unrestricted", "vertical-scroll", "web-app-installation", "web-printing", "web-share", "window-management", "xr-spatial-tracking":
		return true
	default:
		return false
	}
}

func (e PermissionsPolicyFeature) String() string {
	return string(e)
}

// PermissionsPolicyBlockReason Reason for a permissions policy feature to be
// disabled.
//
// Note: This type is experimental.
type PermissionsPolicyBlockReason string

// PermissionsPolicyBlockReason as enums.
const (
	PermissionsPolicyBlockReasonNotSet            PermissionsPolicyBlockReason = ""
	PermissionsPolicyBlockReasonHeader            PermissionsPolicyBlockReason = "Header"
	PermissionsPolicyBlockReasonIframeAttribute   PermissionsPolicyBlockReason = "IframeAttribute"
	PermissionsPolicyBlockReasonInFencedFrameTree PermissionsPolicyBlockReason = "InFencedFrameTree"
	PermissionsPolicyBlockReasonInIsolatedApp     PermissionsPolicyBlockReason = "InIsolatedApp"
)

func (e PermissionsPolicyBlockReason) Valid() bool {
	switch e {
	case "Header", "IframeAttribute", "InFencedFrameTree", "InIsolatedApp":
		return true
	default:
		return false
	}
}

func (e PermissionsPolicyBlockReason) String() string {
	return string(e)
}

// PermissionsPolicyBlockLocator
//
// Note: This type is experimental.
type PermissionsPolicyBlockLocator struct {
	FrameID     FrameID                      `json:"frameId"`     // No description.
	BlockReason PermissionsPolicyBlockReason `json:"blockReason"` // No description.
}

// PermissionsPolicyFeatureState
//
// Note: This type is experimental.
type PermissionsPolicyFeatureState struct {
	Feature PermissionsPolicyFeature       `json:"feature"`           // No description.
	Allowed bool                           `json:"allowed"`           // No description.
	Locator *PermissionsPolicyBlockLocator `json:"locator,omitempty"` // No description.
}

// OriginTrialTokenStatus Origin
// Trial(https://www.chromium.org/blink/origin-trials) support. Status for an
// Origin Trial token.
//
// Note: This type is experimental.
type OriginTrialTokenStatus string

// OriginTrialTokenStatus as enums.
const (
	OriginTrialTokenStatusNotSet                 OriginTrialTokenStatus = ""
	OriginTrialTokenStatusSuccess                OriginTrialTokenStatus = "Success"
	OriginTrialTokenStatusNotSupported           OriginTrialTokenStatus = "NotSupported"
	OriginTrialTokenStatusInsecure               OriginTrialTokenStatus = "Insecure"
	OriginTrialTokenStatusExpired                OriginTrialTokenStatus = "Expired"
	OriginTrialTokenStatusWrongOrigin            OriginTrialTokenStatus = "WrongOrigin"
	OriginTrialTokenStatusInvalidSignature       OriginTrialTokenStatus = "InvalidSignature"
	OriginTrialTokenStatusMalformed              OriginTrialTokenStatus = "Malformed"
	OriginTrialTokenStatusWrongVersion           OriginTrialTokenStatus = "WrongVersion"
	OriginTrialTokenStatusFeatureDisabled        OriginTrialTokenStatus = "FeatureDisabled"
	OriginTrialTokenStatusTokenDisabled          OriginTrialTokenStatus = "TokenDisabled"
	OriginTrialTokenStatusFeatureDisabledForUser OriginTrialTokenStatus = "FeatureDisabledForUser"
	OriginTrialTokenStatusUnknownTrial           OriginTrialTokenStatus = "UnknownTrial"
)

func (e OriginTrialTokenStatus) Valid() bool {
	switch e {
	case "Success", "NotSupported", "Insecure", "Expired", "WrongOrigin", "InvalidSignature", "Malformed", "WrongVersion", "FeatureDisabled", "TokenDisabled", "FeatureDisabledForUser", "UnknownTrial":
		return true
	default:
		return false
	}
}

func (e OriginTrialTokenStatus) String() string {
	return string(e)
}

// OriginTrialStatus Status for an Origin Trial.
//
// Note: This type is experimental.
type OriginTrialStatus string

// OriginTrialStatus as enums.
const (
	OriginTrialStatusNotSet                OriginTrialStatus = ""
	OriginTrialStatusEnabled               OriginTrialStatus = "Enabled"
	OriginTrialStatusValidTokenNotProvided OriginTrialStatus = "ValidTokenNotProvided"
	OriginTrialStatusOSNotSupported        OriginTrialStatus = "OSNotSupported"
	OriginTrialStatusTrialNotAllowed       OriginTrialStatus = "TrialNotAllowed"
)

func (e OriginTrialStatus) Valid() bool {
	switch e {
	case "Enabled", "ValidTokenNotProvided", "OSNotSupported", "TrialNotAllowed":
		return true
	default:
		return false
	}
}

func (e OriginTrialStatus) String() string {
	return string(e)
}

// OriginTrialUsageRestriction
//
// Note: This type is experimental.
type OriginTrialUsageRestriction string

// OriginTrialUsageRestriction as enums.
const (
	OriginTrialUsageRestrictionNotSet OriginTrialUsageRestriction = ""
	OriginTrialUsageRestrictionNone   OriginTrialUsageRestriction = "None"
	OriginTrialUsageRestrictionSubset OriginTrialUsageRestriction = "Subset"
)

func (e OriginTrialUsageRestriction) Valid() bool {
	switch e {
	case "None", "Subset":
		return true
	default:
		return false
	}
}

func (e OriginTrialUsageRestriction) String() string {
	return string(e)
}

// OriginTrialToken
//
// Note: This type is experimental.
type OriginTrialToken struct {
	Origin           string                      `json:"origin"`           // No description.
	MatchSubDomains  bool                        `json:"matchSubDomains"`  // No description.
	TrialName        string                      `json:"trialName"`        // No description.
	ExpiryTime       network.TimeSinceEpoch      `json:"expiryTime"`       // No description.
	IsThirdParty     bool                        `json:"isThirdParty"`     // No description.
	UsageRestriction OriginTrialUsageRestriction `json:"usageRestriction"` // No description.
}

// OriginTrialTokenWithStatus
//
// Note: This type is experimental.
type OriginTrialTokenWithStatus struct {
	RawTokenText string                 `json:"rawTokenText"`          // No description.
	ParsedToken  *OriginTrialToken      `json:"parsedToken,omitempty"` // `parsedToken` is present only when the token is extractable and parsable.
	Status       OriginTrialTokenStatus `json:"status"`                // No description.
}

// OriginTrial
//
// Note: This type is experimental.
type OriginTrial struct {
	TrialName        string                       `json:"trialName"`        // No description.
	Status           OriginTrialStatus            `json:"status"`           // No description.
	TokensWithStatus []OriginTrialTokenWithStatus `json:"tokensWithStatus"` // No description.
}

// Frame Information about the Frame on the page.
type Frame struct {
	ID       FrameID          `json:"id"`                 // Frame unique identifier.
	ParentID *FrameID         `json:"parentId,omitempty"` // Parent frame identifier.
	LoaderID network.LoaderID `json:"loaderId"`           // Identifier of the loader associated with this frame.
	Name     *string          `json:"name,omitempty"`     // Frame's name as specified in the tag.
	URL      string           `json:"url"`                // Frame document's URL without fragment.
	// URLFragment Frame document's URL fragment including the '#'.
	//
	// Note: This property is experimental.
	URLFragment *string `json:"urlFragment,omitempty"`
	// DomainAndRegistry Frame document's registered domain, taking the
	// public suffixes list into account. Extracted from the Frame's url.
	// Example URLs: http://www.google.com/file.html -> "google.com"
	// http://a.b.co.uk/file.html -> "b.co.uk"
	//
	// Note: This property is experimental.
	DomainAndRegistry string `json:"domainAndRegistry"`
	SecurityOrigin    string `json:"securityOrigin"` // Frame document's security origin.
	MimeType          string `json:"mimeType"`       // Frame document's mimeType as determined by the browser.
	// UnreachableURL If the frame failed to load, this contains the URL
	// that could not be loaded. Note that unlike url above, this URL may
	// contain a fragment.
	//
	// Note: This property is experimental.
	UnreachableURL *string `json:"unreachableUrl,omitempty"`
	// AdFrameStatus Indicates whether this frame was tagged as an ad and
	// why.
	//
	// Note: This property is experimental.
	AdFrameStatus *AdFrameStatus `json:"adFrameStatus,omitempty"`
	// SecureContextType Indicates whether the main document is a secure
	// context and explains why that is the case.
	//
	// Note: This property is experimental.
	SecureContextType SecureContextType `json:"secureContextType"`
	// CrossOriginIsolatedContextType Indicates whether this is a cross
	// origin isolated context.
	//
	// Note: This property is experimental.
	CrossOriginIsolatedContextType CrossOriginIsolatedContextType `json:"crossOriginIsolatedContextType"`
	// GatedAPIFeatures Indicated which gated APIs / features are
	// available.
	//
	// Note: This property is experimental.
	GatedAPIFeatures []GatedAPIFeatures `json:"gatedAPIFeatures"`
}

// FrameResource Information about the Resource on the page.
//
// Note: This type is experimental.
type FrameResource struct {
	URL          string                 `json:"url"`                    // Resource URL.
	Type         network.ResourceType   `json:"type"`                   // Type of this resource.
	MimeType     string                 `json:"mimeType"`               // Resource mimeType as determined by the browser.
	LastModified network.TimeSinceEpoch `json:"lastModified,omitempty"` // last-modified timestamp as reported by server.
	ContentSize  *float64               `json:"contentSize,omitempty"`  // Resource content size.
	Failed       *bool                  `json:"failed,omitempty"`       // True if the resource failed to load.
	Canceled     *bool                  `json:"canceled,omitempty"`     // True if the resource was canceled during loading.
}

// FrameResourceTree Information about the Frame hierarchy along with their
// cached resources.
//
// Note: This type is experimental.
type FrameResourceTree struct {
	Frame       Frame               `json:"frame"`                 // Frame information for this tree item.
	ChildFrames []FrameResourceTree `json:"childFrames,omitempty"` // Child frames.
	Resources   []FrameResource     `json:"resources"`             // Information about frame resources.
}

// FrameTree Information about the Frame hierarchy.
type FrameTree struct {
	Frame       Frame       `json:"frame"`                 // Frame information for this tree item.
	ChildFrames []FrameTree `json:"childFrames,omitempty"` // Child frames.
}

// ScriptIdentifier Unique script identifier.
type ScriptIdentifier string

// TransitionType Transition type.
type TransitionType string

// TransitionType as enums.
const (
	TransitionTypeNotSet           TransitionType = ""
	TransitionTypeLink             TransitionType = "link"
	TransitionTypeTyped            TransitionType = "typed"
	TransitionTypeAddressBar       TransitionType = "address_bar"
	TransitionTypeAutoBookmark     TransitionType = "auto_bookmark"
	TransitionTypeAutoSubframe     TransitionType = "auto_subframe"
	TransitionTypeManualSubframe   TransitionType = "manual_subframe"
	TransitionTypeGenerated        TransitionType = "generated"
	TransitionTypeAutoToplevel     TransitionType = "auto_toplevel"
	TransitionTypeFormSubmit       TransitionType = "form_submit"
	TransitionTypeReload           TransitionType = "reload"
	TransitionTypeKeyword          TransitionType = "keyword"
	TransitionTypeKeywordGenerated TransitionType = "keyword_generated"
	TransitionTypeOther            TransitionType = "other"
)

func (e TransitionType) Valid() bool {
	switch e {
	case "link", "typed", "address_bar", "auto_bookmark", "auto_subframe", "manual_subframe", "generated", "auto_toplevel", "form_submit", "reload", "keyword", "keyword_generated", "other":
		return true
	default:
		return false
	}
}

func (e TransitionType) String() string {
	return string(e)
}

// NavigationEntry Navigation history entry.
type NavigationEntry struct {
	ID             int            `json:"id"`             // Unique id of the navigation history entry.
	URL            string         `json:"url"`            // URL of the navigation history entry.
	UserTypedURL   string         `json:"userTypedURL"`   // URL that the user typed in the url bar.
	Title          string         `json:"title"`          // Title of the navigation history entry.
	TransitionType TransitionType `json:"transitionType"` // Transition type.
}

// ScreencastFrameMetadata Screencast frame metadata.
//
// Note: This type is experimental.
type ScreencastFrameMetadata struct {
	OffsetTop       float64                `json:"offsetTop"`           // Top offset in DIP.
	PageScaleFactor float64                `json:"pageScaleFactor"`     // Page scale factor.
	DeviceWidth     float64                `json:"deviceWidth"`         // Device screen width in DIP.
	DeviceHeight    float64                `json:"deviceHeight"`        // Device screen height in DIP.
	ScrollOffsetX   float64                `json:"scrollOffsetX"`       // Position of horizontal scroll in CSS pixels.
	ScrollOffsetY   float64                `json:"scrollOffsetY"`       // Position of vertical scroll in CSS pixels.
	Timestamp       network.TimeSinceEpoch `json:"timestamp,omitempty"` // Frame swap timestamp.
}

// DialogType Javascript dialog type.
type DialogType string

// DialogType as enums.
const (
	DialogTypeNotSet       DialogType = ""
	DialogTypeAlert        DialogType = "alert"
	DialogTypeConfirm      DialogType = "confirm"
	DialogTypePrompt       DialogType = "prompt"
	DialogTypeBeforeunload DialogType = "beforeunload"
)

func (e DialogType) Valid() bool {
	switch e {
	case "alert", "confirm", "prompt", "beforeunload":
		return true
	default:
		return false
	}
}

func (e DialogType) String() string {
	return string(e)
}

// AppManifestError Error while paring app manifest.
type AppManifestError struct {
	Message  string `json:"message"`  // Error message.
	Critical int    `json:"critical"` // If critical, this is a non-recoverable parse error.
	Line     int    `json:"line"`     // Error line.
	Column   int    `json:"column"`   // Error column.
}

// AppManifestParsedProperties Parsed app manifest properties.
//
// Note: This type is experimental.
type AppManifestParsedProperties struct {
	Scope string `json:"scope"` // Computed scope value
}

// LayoutViewport Layout viewport position and dimensions.
type LayoutViewport struct {
	PageX        int `json:"pageX"`        // Horizontal offset relative to the document (CSS pixels).
	PageY        int `json:"pageY"`        // Vertical offset relative to the document (CSS pixels).
	ClientWidth  int `json:"clientWidth"`  // Width (CSS pixels), excludes scrollbar if present.
	ClientHeight int `json:"clientHeight"` // Height (CSS pixels), excludes scrollbar if present.
}

// VisualViewport Visual viewport position, dimensions, and scale.
type VisualViewport struct {
	OffsetX      float64  `json:"offsetX"`        // Horizontal offset relative to the layout viewport (CSS pixels).
	OffsetY      float64  `json:"offsetY"`        // Vertical offset relative to the layout viewport (CSS pixels).
	PageX        float64  `json:"pageX"`          // Horizontal offset relative to the document (CSS pixels).
	PageY        float64  `json:"pageY"`          // Vertical offset relative to the document (CSS pixels).
	ClientWidth  float64  `json:"clientWidth"`    // Width (CSS pixels), excludes scrollbar if present.
	ClientHeight float64  `json:"clientHeight"`   // Height (CSS pixels), excludes scrollbar if present.
	Scale        float64  `json:"scale"`          // Scale relative to the ideal viewport (size at width=device-width).
	Zoom         *float64 `json:"zoom,omitempty"` // Page zoom factor (CSS to device independent pixels ratio).
}

// Viewport Viewport for capturing screenshot.
type Viewport struct {
	X      float64 `json:"x"`      // X offset in device independent pixels (dip).
	Y      float64 `json:"y"`      // Y offset in device independent pixels (dip).
	Width  float64 `json:"width"`  // Rectangle width in device independent pixels (dip).
	Height float64 `json:"height"` // Rectangle height in device independent pixels (dip).
	Scale  float64 `json:"scale"`  // Page scale factor.
}

// FontFamilies Generic font families collection.
//
// Note: This type is experimental.
type FontFamilies struct {
	Standard  *string `json:"standard,omitempty"`  // The standard font-family.
	Fixed     *string `json:"fixed,omitempty"`     // The fixed font-family.
	Serif     *string `json:"serif,omitempty"`     // The serif font-family.
	SansSerif *string `json:"sansSerif,omitempty"` // The sansSerif font-family.
	Cursive   *string `json:"cursive,omitempty"`   // The cursive font-family.
	Fantasy   *string `json:"fantasy,omitempty"`   // The fantasy font-family.
	Math      *string `json:"math,omitempty"`      // The math font-family.
}

// ScriptFontFamilies Font families collection for a script.
//
// Note: This type is experimental.
type ScriptFontFamilies struct {
	Script       string       `json:"script"`       // Name of the script which these font families are defined for.
	FontFamilies FontFamilies `json:"fontFamilies"` // Generic font families collection for the script.
}

// FontSizes Default font sizes.
//
// Note: This type is experimental.
type FontSizes struct {
	Standard *int `json:"standard,omitempty"` // Default standard font size.
	Fixed    *int `json:"fixed,omitempty"`    // Default fixed font size.
}

// ClientNavigationReason
//
// Note: This type is experimental.
type ClientNavigationReason string

// ClientNavigationReason as enums.
const (
	ClientNavigationReasonNotSet                 ClientNavigationReason = ""
	ClientNavigationReasonAnchorClick            ClientNavigationReason = "anchorClick"
	ClientNavigationReasonFormSubmissionGet      ClientNavigationReason = "formSubmissionGet"
	ClientNavigationReasonFormSubmissionPost     ClientNavigationReason = "formSubmissionPost"
	ClientNavigationReasonHTTPHeaderRefresh      ClientNavigationReason = "httpHeaderRefresh"
	ClientNavigationReasonInitialFrameNavigation ClientNavigationReason = "initialFrameNavigation"
	ClientNavigationReasonMetaTagRefresh         ClientNavigationReason = "metaTagRefresh"
	ClientNavigationReasonOther                  ClientNavigationReason = "other"
	ClientNavigationReasonPageBlockInterstitial  ClientNavigationReason = "pageBlockInterstitial"
	ClientNavigationReasonReload                 ClientNavigationReason = "reload"
	ClientNavigationReasonScriptInitiated        ClientNavigationReason = "scriptInitiated"
)

func (e ClientNavigationReason) Valid() bool {
	switch e {
	case "anchorClick", "formSubmissionGet", "formSubmissionPost", "httpHeaderRefresh", "initialFrameNavigation", "metaTagRefresh", "other", "pageBlockInterstitial", "reload", "scriptInitiated":
		return true
	default:
		return false
	}
}

func (e ClientNavigationReason) String() string {
	return string(e)
}

// ClientNavigationDisposition
//
// Note: This type is experimental.
type ClientNavigationDisposition string

// ClientNavigationDisposition as enums.
const (
	ClientNavigationDispositionNotSet     ClientNavigationDisposition = ""
	ClientNavigationDispositionCurrentTab ClientNavigationDisposition = "currentTab"
	ClientNavigationDispositionNewTab     ClientNavigationDisposition = "newTab"
	ClientNavigationDispositionNewWindow  ClientNavigationDisposition = "newWindow"
	ClientNavigationDispositionDownload   ClientNavigationDisposition = "download"
)

func (e ClientNavigationDisposition) Valid() bool {
	switch e {
	case "currentTab", "newTab", "newWindow", "download":
		return true
	default:
		return false
	}
}

func (e ClientNavigationDisposition) String() string {
	return string(e)
}

// InstallabilityErrorArgument
//
// Note: This type is experimental.
type InstallabilityErrorArgument struct {
	Name  string `json:"name"`  // Argument name (e.g. name:'minimum-icon-size-in-pixels').
	Value string `json:"value"` // Argument value (e.g. value:'64').
}

// InstallabilityError The installability error
//
// Note: This type is experimental.
type InstallabilityError struct {
	ErrorID        string                        `json:"errorId"`        // The error id (e.g. 'manifest-missing-suitable-icon').
	ErrorArguments []InstallabilityErrorArgument `json:"errorArguments"` // The list of error arguments (e.g. {name:'minimum-icon-size-in-pixels', value:'64'}).
}

// ReferrerPolicy The referring-policy used for the navigation.
//
// Note: This type is experimental.
type ReferrerPolicy string

// ReferrerPolicy as enums.
const (
	ReferrerPolicyNotSet                      ReferrerPolicy = ""
	ReferrerPolicyNoReferrer                  ReferrerPolicy = "noReferrer"
	ReferrerPolicyNoReferrerWhenDowngrade     ReferrerPolicy = "noReferrerWhenDowngrade"
	ReferrerPolicyOrigin                      ReferrerPolicy = "origin"
	ReferrerPolicyOriginWhenCrossOrigin       ReferrerPolicy = "originWhenCrossOrigin"
	ReferrerPolicySameOrigin                  ReferrerPolicy = "sameOrigin"
	ReferrerPolicyStrictOrigin                ReferrerPolicy = "strictOrigin"
	ReferrerPolicyStrictOriginWhenCrossOrigin ReferrerPolicy = "strictOriginWhenCrossOrigin"
	ReferrerPolicyUnsafeURL                   ReferrerPolicy = "unsafeUrl"
)

func (e ReferrerPolicy) Valid() bool {
	switch e {
	case "noReferrer", "noReferrerWhenDowngrade", "origin", "originWhenCrossOrigin", "sameOrigin", "strictOrigin", "strictOriginWhenCrossOrigin", "unsafeUrl":
		return true
	default:
		return false
	}
}

func (e ReferrerPolicy) String() string {
	return string(e)
}

// CompilationCacheParams Per-script compilation cache parameters for
// `Page.produceCompilationCache`
//
// Note: This type is experimental.
type CompilationCacheParams struct {
	URL   string `json:"url"`             // The URL of the script to produce a compilation cache entry for.
	Eager *bool  `json:"eager,omitempty"` // A hint to the backend whether eager compilation is recommended. (the actual compilation mode used is upon backend discretion).
}

// FileFilter
//
// Note: This type is experimental.
type FileFilter struct {
	Name    *string  `json:"name,omitempty"`    // No description.
	Accepts []string `json:"accepts,omitempty"` // No description.
}

// FileHandler
//
// Note: This type is experimental.
type FileHandler struct {
	Action     string          `json:"action"`            // No description.
	Name       string          `json:"name"`              // No description.
	Icons      []ImageResource `json:"icons,omitempty"`   // No description.
	Accepts    []FileFilter    `json:"accepts,omitempty"` // Mimic a map, name is the key, accepts is the value.
	LaunchType string          `json:"launchType"`        // Won't repeat the enums, using string for easy comparison. Same as the other enums below.
}

// ImageResource The image definition used in both icon and screenshot.
//
// Note: This type is experimental.
type ImageResource struct {
	URL   string  `json:"url"`             // The src field in the definition, but changing to url in favor of consistency.
	Sizes *string `json:"sizes,omitempty"` // No description.
	Type  *string `json:"type,omitempty"`  // No description.
}

// LaunchHandler
//
// Note: This type is experimental.
type LaunchHandler struct {
	ClientMode string `json:"clientMode"` // No description.
}

// ProtocolHandler
//
// Note: This type is experimental.
type ProtocolHandler struct {
	Protocol string `json:"protocol"` // No description.
	URL      string `json:"url"`      // No description.
}

// RelatedApplication
//
// Note: This type is experimental.
type RelatedApplication struct {
	ID  *string `json:"id,omitempty"` // No description.
	URL string  `json:"url"`          // No description.
}

// ScopeExtension
//
// Note: This type is experimental.
type ScopeExtension struct {
	Origin            string `json:"origin"`            // Instead of using tuple, this field always returns the serialized string for easy understanding and comparison.
	HasOriginWildcard bool   `json:"hasOriginWildcard"` // No description.
}

// Screenshot
//
// Note: This type is experimental.
type Screenshot struct {
	Image      ImageResource `json:"image"`           // No description.
	FormFactor string        `json:"formFactor"`      // No description.
	Label      *string       `json:"label,omitempty"` // No description.
}

// ShareTarget
//
// Note: This type is experimental.
type ShareTarget struct {
	Action  string       `json:"action"`          // No description.
	Method  string       `json:"method"`          // No description.
	Enctype string       `json:"enctype"`         // No description.
	Title   *string      `json:"title,omitempty"` // Embed the ShareTargetParams
	Text    *string      `json:"text,omitempty"`  // No description.
	URL     *string      `json:"url,omitempty"`   // No description.
	Files   []FileFilter `json:"files,omitempty"` // No description.
}

// Shortcut
//
// Note: This type is experimental.
type Shortcut struct {
	Name string `json:"name"` // No description.
	URL  string `json:"url"`  // No description.
}

// WebAppManifest
//
// Note: This type is experimental.
type WebAppManifest struct {
	BackgroundColor           *string              `json:"backgroundColor,omitempty"`           // No description.
	Description               *string              `json:"description,omitempty"`               // The extra description provided by the manifest.
	Dir                       *string              `json:"dir,omitempty"`                       // No description.
	Display                   *string              `json:"display,omitempty"`                   // No description.
	DisplayOverrides          []string             `json:"displayOverrides,omitempty"`          // The overrided display mode controlled by the user.
	FileHandlers              []FileHandler        `json:"fileHandlers,omitempty"`              // The handlers to open files.
	Icons                     []ImageResource      `json:"icons,omitempty"`                     // No description.
	ID                        *string              `json:"id,omitempty"`                        // No description.
	Lang                      *string              `json:"lang,omitempty"`                      // No description.
	LaunchHandler             *LaunchHandler       `json:"launchHandler,omitempty"`             // TODO(crbug.com/1231886): This field is non-standard and part of a Chrome experiment. See: https://github.com/WICG/web-app-launch/blob/main/launch_handler.md
	Name                      *string              `json:"name,omitempty"`                      // No description.
	Orientation               *string              `json:"orientation,omitempty"`               // No description.
	PreferRelatedApplications *bool                `json:"preferRelatedApplications,omitempty"` // No description.
	ProtocolHandlers          []ProtocolHandler    `json:"protocolHandlers,omitempty"`          // The handlers to open protocols.
	RelatedApplications       []RelatedApplication `json:"relatedApplications,omitempty"`       // No description.
	Scope                     *string              `json:"scope,omitempty"`                     // No description.
	ScopeExtensions           []ScopeExtension     `json:"scopeExtensions,omitempty"`           // Non-standard, see https://github.com/WICG/manifest-incubations/blob/gh-pages/scope_extensions-explainer.md
	Screenshots               []Screenshot         `json:"screenshots,omitempty"`               // The screenshots used by chromium.
	ShareTarget               *ShareTarget         `json:"shareTarget,omitempty"`               // No description.
	ShortName                 *string              `json:"shortName,omitempty"`                 // No description.
	Shortcuts                 []Shortcut           `json:"shortcuts,omitempty"`                 // No description.
	StartURL                  *string              `json:"startUrl,omitempty"`                  // No description.
	ThemeColor                *string              `json:"themeColor,omitempty"`                // No description.
}

// AutoResponseMode Enum of possible auto-response for permission / prompt
// dialogs.
//
// Note: This type is experimental.
type AutoResponseMode string

// AutoResponseMode as enums.
const (
	AutoResponseModeNotSet     AutoResponseMode = ""
	AutoResponseModeNone       AutoResponseMode = "none"
	AutoResponseModeAutoAccept AutoResponseMode = "autoAccept"
	AutoResponseModeAutoReject AutoResponseMode = "autoReject"
	AutoResponseModeAutoOptOut AutoResponseMode = "autoOptOut"
)

func (e AutoResponseMode) Valid() bool {
	switch e {
	case "none", "autoAccept", "autoReject", "autoOptOut":
		return true
	default:
		return false
	}
}

func (e AutoResponseMode) String() string {
	return string(e)
}

// NavigationType The type of a frameNavigated event.
//
// Note: This type is experimental.
type NavigationType string

// NavigationType as enums.
const (
	NavigationTypeNotSet                  NavigationType = ""
	NavigationTypeNavigation              NavigationType = "Navigation"
	NavigationTypeBackForwardCacheRestore NavigationType = "BackForwardCacheRestore"
)

func (e NavigationType) Valid() bool {
	switch e {
	case "Navigation", "BackForwardCacheRestore":
		return true
	default:
		return false
	}
}

func (e NavigationType) String() string {
	return string(e)
}

// BackForwardCacheNotRestoredReason List of not restored reasons for
// back-forward cache.
//
// Note: This type is experimental.
type BackForwardCacheNotRestoredReason string

// BackForwardCacheNotRestoredReason as enums.
const (
	BackForwardCacheNotRestoredReasonNotSet                                                   BackForwardCacheNotRestoredReason = ""
	BackForwardCacheNotRestoredReasonNotPrimaryMainFrame                                      BackForwardCacheNotRestoredReason = "NotPrimaryMainFrame"
	BackForwardCacheNotRestoredReasonBackForwardCacheDisabled                                 BackForwardCacheNotRestoredReason = "BackForwardCacheDisabled"
	BackForwardCacheNotRestoredReasonRelatedActiveContentsExist                               BackForwardCacheNotRestoredReason = "RelatedActiveContentsExist"
	BackForwardCacheNotRestoredReasonHTTPStatusNotOK                                          BackForwardCacheNotRestoredReason = "HTTPStatusNotOK"
	BackForwardCacheNotRestoredReasonSchemeNotHTTPOrHTTPS                                     BackForwardCacheNotRestoredReason = "SchemeNotHTTPOrHTTPS"
	BackForwardCacheNotRestoredReasonLoading                                                  BackForwardCacheNotRestoredReason = "Loading"
	BackForwardCacheNotRestoredReasonWasGrantedMediaAccess                                    BackForwardCacheNotRestoredReason = "WasGrantedMediaAccess"
	BackForwardCacheNotRestoredReasonDisableForRenderFrameHostCalled                          BackForwardCacheNotRestoredReason = "DisableForRenderFrameHostCalled"
	BackForwardCacheNotRestoredReasonDomainNotAllowed                                         BackForwardCacheNotRestoredReason = "DomainNotAllowed"
	BackForwardCacheNotRestoredReasonHTTPMethodNotGET                                         BackForwardCacheNotRestoredReason = "HTTPMethodNotGET"
	BackForwardCacheNotRestoredReasonSubframeIsNavigating                                     BackForwardCacheNotRestoredReason = "SubframeIsNavigating"
	BackForwardCacheNotRestoredReasonTimeout                                                  BackForwardCacheNotRestoredReason = "Timeout"
	BackForwardCacheNotRestoredReasonCacheLimit                                               BackForwardCacheNotRestoredReason = "CacheLimit"
	BackForwardCacheNotRestoredReasonJavaScriptExecution                                      BackForwardCacheNotRestoredReason = "JavaScriptExecution"
	BackForwardCacheNotRestoredReasonRendererProcessKilled                                    BackForwardCacheNotRestoredReason = "RendererProcessKilled"
	BackForwardCacheNotRestoredReasonRendererProcessCrashed                                   BackForwardCacheNotRestoredReason = "RendererProcessCrashed"
	BackForwardCacheNotRestoredReasonSchedulerTrackedFeatureUsed                              BackForwardCacheNotRestoredReason = "SchedulerTrackedFeatureUsed"
	BackForwardCacheNotRestoredReasonConflictingBrowsingInstance                              BackForwardCacheNotRestoredReason = "ConflictingBrowsingInstance"
	BackForwardCacheNotRestoredReasonCacheFlushed                                             BackForwardCacheNotRestoredReason = "CacheFlushed"
	BackForwardCacheNotRestoredReasonServiceWorkerVersionActivation                           BackForwardCacheNotRestoredReason = "ServiceWorkerVersionActivation"
	BackForwardCacheNotRestoredReasonSessionRestored                                          BackForwardCacheNotRestoredReason = "SessionRestored"
	BackForwardCacheNotRestoredReasonServiceWorkerPostMessage                                 BackForwardCacheNotRestoredReason = "ServiceWorkerPostMessage"
	BackForwardCacheNotRestoredReasonEnteredBackForwardCacheBeforeServiceWorkerHostAdded      BackForwardCacheNotRestoredReason = "EnteredBackForwardCacheBeforeServiceWorkerHostAdded"
	BackForwardCacheNotRestoredReasonRenderFrameHostReusedSameSite                            BackForwardCacheNotRestoredReason = "RenderFrameHostReused_SameSite"
	BackForwardCacheNotRestoredReasonRenderFrameHostReusedCrossSite                           BackForwardCacheNotRestoredReason = "RenderFrameHostReused_CrossSite"
	BackForwardCacheNotRestoredReasonServiceWorkerClaim                                       BackForwardCacheNotRestoredReason = "ServiceWorkerClaim"
	BackForwardCacheNotRestoredReasonIgnoreEventAndEvict                                      BackForwardCacheNotRestoredReason = "IgnoreEventAndEvict"
	BackForwardCacheNotRestoredReasonHaveInnerContents                                        BackForwardCacheNotRestoredReason = "HaveInnerContents"
	BackForwardCacheNotRestoredReasonTimeoutPuttingInCache                                    BackForwardCacheNotRestoredReason = "TimeoutPuttingInCache"
	BackForwardCacheNotRestoredReasonBackForwardCacheDisabledByLowMemory                      BackForwardCacheNotRestoredReason = "BackForwardCacheDisabledByLowMemory"
	BackForwardCacheNotRestoredReasonBackForwardCacheDisabledByCommandLine                    BackForwardCacheNotRestoredReason = "BackForwardCacheDisabledByCommandLine"
	BackForwardCacheNotRestoredReasonNetworkRequestDatapipeDrainedAsBytesConsumer             BackForwardCacheNotRestoredReason = "NetworkRequestDatapipeDrainedAsBytesConsumer"
	BackForwardCacheNotRestoredReasonNetworkRequestRedirected                                 BackForwardCacheNotRestoredReason = "NetworkRequestRedirected"
	BackForwardCacheNotRestoredReasonNetworkRequestTimeout                                    BackForwardCacheNotRestoredReason = "NetworkRequestTimeout"
	BackForwardCacheNotRestoredReasonNetworkExceedsBufferLimit                                BackForwardCacheNotRestoredReason = "NetworkExceedsBufferLimit"
	BackForwardCacheNotRestoredReasonNavigationCancelledWhileRestoring                        BackForwardCacheNotRestoredReason = "NavigationCancelledWhileRestoring"
	BackForwardCacheNotRestoredReasonNotMostRecentNavigationEntry                             BackForwardCacheNotRestoredReason = "NotMostRecentNavigationEntry"
	BackForwardCacheNotRestoredReasonBackForwardCacheDisabledForPrerender                     BackForwardCacheNotRestoredReason = "BackForwardCacheDisabledForPrerender"
	BackForwardCacheNotRestoredReasonUserAgentOverrideDiffers                                 BackForwardCacheNotRestoredReason = "UserAgentOverrideDiffers"
	BackForwardCacheNotRestoredReasonForegroundCacheLimit                                     BackForwardCacheNotRestoredReason = "ForegroundCacheLimit"
	BackForwardCacheNotRestoredReasonBrowsingInstanceNotSwapped                               BackForwardCacheNotRestoredReason = "BrowsingInstanceNotSwapped"
	BackForwardCacheNotRestoredReasonBackForwardCacheDisabledForDelegate                      BackForwardCacheNotRestoredReason = "BackForwardCacheDisabledForDelegate"
	BackForwardCacheNotRestoredReasonUnloadHandlerExistsInMainFrame                           BackForwardCacheNotRestoredReason = "UnloadHandlerExistsInMainFrame"
	BackForwardCacheNotRestoredReasonUnloadHandlerExistsInSubFrame                            BackForwardCacheNotRestoredReason = "UnloadHandlerExistsInSubFrame"
	BackForwardCacheNotRestoredReasonServiceWorkerUnregistration                              BackForwardCacheNotRestoredReason = "ServiceWorkerUnregistration"
	BackForwardCacheNotRestoredReasonCacheControlNoStore                                      BackForwardCacheNotRestoredReason = "CacheControlNoStore"
	BackForwardCacheNotRestoredReasonCacheControlNoStoreCookieModified                        BackForwardCacheNotRestoredReason = "CacheControlNoStoreCookieModified"
	BackForwardCacheNotRestoredReasonCacheControlNoStoreHTTPOnlyCookieModified                BackForwardCacheNotRestoredReason = "CacheControlNoStoreHTTPOnlyCookieModified"
	BackForwardCacheNotRestoredReasonNoResponseHead                                           BackForwardCacheNotRestoredReason = "NoResponseHead"
	BackForwardCacheNotRestoredReasonUnknown                                                  BackForwardCacheNotRestoredReason = "Unknown"
	BackForwardCacheNotRestoredReasonActivationNavigationsDisallowedForBug1234857             BackForwardCacheNotRestoredReason = "ActivationNavigationsDisallowedForBug1234857"
	BackForwardCacheNotRestoredReasonErrorDocument                                            BackForwardCacheNotRestoredReason = "ErrorDocument"
	BackForwardCacheNotRestoredReasonFencedFramesEmbedder                                     BackForwardCacheNotRestoredReason = "FencedFramesEmbedder"
	BackForwardCacheNotRestoredReasonCookieDisabled                                           BackForwardCacheNotRestoredReason = "CookieDisabled"
	BackForwardCacheNotRestoredReasonHTTPAuthRequired                                         BackForwardCacheNotRestoredReason = "HTTPAuthRequired"
	BackForwardCacheNotRestoredReasonCookieFlushed                                            BackForwardCacheNotRestoredReason = "CookieFlushed"
	BackForwardCacheNotRestoredReasonBroadcastChannelOnMessage                                BackForwardCacheNotRestoredReason = "BroadcastChannelOnMessage"
	BackForwardCacheNotRestoredReasonWebViewSettingsChanged                                   BackForwardCacheNotRestoredReason = "WebViewSettingsChanged"
	BackForwardCacheNotRestoredReasonWebViewJavaScriptObjectChanged                           BackForwardCacheNotRestoredReason = "WebViewJavaScriptObjectChanged"
	BackForwardCacheNotRestoredReasonWebViewMessageListenerInjected                           BackForwardCacheNotRestoredReason = "WebViewMessageListenerInjected"
	BackForwardCacheNotRestoredReasonWebViewSafeBrowsingAllowlistChanged                      BackForwardCacheNotRestoredReason = "WebViewSafeBrowsingAllowlistChanged"
	BackForwardCacheNotRestoredReasonWebViewDocumentStartJavascriptChanged                    BackForwardCacheNotRestoredReason = "WebViewDocumentStartJavascriptChanged"
	BackForwardCacheNotRestoredReasonWebSocket                                                BackForwardCacheNotRestoredReason = "WebSocket"
	BackForwardCacheNotRestoredReasonWebTransport                                             BackForwardCacheNotRestoredReason = "WebTransport"
	BackForwardCacheNotRestoredReasonWebRTC                                                   BackForwardCacheNotRestoredReason = "WebRTC"
	BackForwardCacheNotRestoredReasonMainResourceHasCacheControlNoStore                       BackForwardCacheNotRestoredReason = "MainResourceHasCacheControlNoStore"
	BackForwardCacheNotRestoredReasonMainResourceHasCacheControlNoCache                       BackForwardCacheNotRestoredReason = "MainResourceHasCacheControlNoCache"
	BackForwardCacheNotRestoredReasonSubresourceHasCacheControlNoStore                        BackForwardCacheNotRestoredReason = "SubresourceHasCacheControlNoStore"
	BackForwardCacheNotRestoredReasonSubresourceHasCacheControlNoCache                        BackForwardCacheNotRestoredReason = "SubresourceHasCacheControlNoCache"
	BackForwardCacheNotRestoredReasonContainsPlugins                                          BackForwardCacheNotRestoredReason = "ContainsPlugins"
	BackForwardCacheNotRestoredReasonDocumentLoaded                                           BackForwardCacheNotRestoredReason = "DocumentLoaded"
	BackForwardCacheNotRestoredReasonOutstandingNetworkRequestOthers                          BackForwardCacheNotRestoredReason = "OutstandingNetworkRequestOthers"
	BackForwardCacheNotRestoredReasonRequestedMIDIPermission                                  BackForwardCacheNotRestoredReason = "RequestedMIDIPermission"
	BackForwardCacheNotRestoredReasonRequestedAudioCapturePermission                          BackForwardCacheNotRestoredReason = "RequestedAudioCapturePermission"
	BackForwardCacheNotRestoredReasonRequestedVideoCapturePermission                          BackForwardCacheNotRestoredReason = "RequestedVideoCapturePermission"
	BackForwardCacheNotRestoredReasonRequestedBackForwardCacheBlockedSensors                  BackForwardCacheNotRestoredReason = "RequestedBackForwardCacheBlockedSensors"
	BackForwardCacheNotRestoredReasonRequestedBackgroundWorkPermission                        BackForwardCacheNotRestoredReason = "RequestedBackgroundWorkPermission"
	BackForwardCacheNotRestoredReasonBroadcastChannel                                         BackForwardCacheNotRestoredReason = "BroadcastChannel"
	BackForwardCacheNotRestoredReasonWebXR                                                    BackForwardCacheNotRestoredReason = "WebXR"
	BackForwardCacheNotRestoredReasonSharedWorker                                             BackForwardCacheNotRestoredReason = "SharedWorker"
	BackForwardCacheNotRestoredReasonWebLocks                                                 BackForwardCacheNotRestoredReason = "WebLocks"
	BackForwardCacheNotRestoredReasonWebHID                                                   BackForwardCacheNotRestoredReason = "WebHID"
	BackForwardCacheNotRestoredReasonWebShare                                                 BackForwardCacheNotRestoredReason = "WebShare"
	BackForwardCacheNotRestoredReasonRequestedStorageAccessGrant                              BackForwardCacheNotRestoredReason = "RequestedStorageAccessGrant"
	BackForwardCacheNotRestoredReasonWebNFC                                                   BackForwardCacheNotRestoredReason = "WebNfc"
	BackForwardCacheNotRestoredReasonOutstandingNetworkRequestFetch                           BackForwardCacheNotRestoredReason = "OutstandingNetworkRequestFetch"
	BackForwardCacheNotRestoredReasonOutstandingNetworkRequestXHR                             BackForwardCacheNotRestoredReason = "OutstandingNetworkRequestXHR"
	BackForwardCacheNotRestoredReasonAppBanner                                                BackForwardCacheNotRestoredReason = "AppBanner"
	BackForwardCacheNotRestoredReasonPrinting                                                 BackForwardCacheNotRestoredReason = "Printing"
	BackForwardCacheNotRestoredReasonWebDatabase                                              BackForwardCacheNotRestoredReason = "WebDatabase"
	BackForwardCacheNotRestoredReasonPictureInPicture                                         BackForwardCacheNotRestoredReason = "PictureInPicture"
	BackForwardCacheNotRestoredReasonSpeechRecognizer                                         BackForwardCacheNotRestoredReason = "SpeechRecognizer"
	BackForwardCacheNotRestoredReasonIdleManager                                              BackForwardCacheNotRestoredReason = "IdleManager"
	BackForwardCacheNotRestoredReasonPaymentManager                                           BackForwardCacheNotRestoredReason = "PaymentManager"
	BackForwardCacheNotRestoredReasonSpeechSynthesis                                          BackForwardCacheNotRestoredReason = "SpeechSynthesis"
	BackForwardCacheNotRestoredReasonKeyboardLock                                             BackForwardCacheNotRestoredReason = "KeyboardLock"
	BackForwardCacheNotRestoredReasonWebOTPService                                            BackForwardCacheNotRestoredReason = "WebOTPService"
	BackForwardCacheNotRestoredReasonOutstandingNetworkRequestDirectSocket                    BackForwardCacheNotRestoredReason = "OutstandingNetworkRequestDirectSocket"
	BackForwardCacheNotRestoredReasonInjectedJavascript                                       BackForwardCacheNotRestoredReason = "InjectedJavascript"
	BackForwardCacheNotRestoredReasonInjectedStyleSheet                                       BackForwardCacheNotRestoredReason = "InjectedStyleSheet"
	BackForwardCacheNotRestoredReasonKeepaliveRequest                                         BackForwardCacheNotRestoredReason = "KeepaliveRequest"
	BackForwardCacheNotRestoredReasonIndexedDBEvent                                           BackForwardCacheNotRestoredReason = "IndexedDBEvent"
	BackForwardCacheNotRestoredReasonDummy                                                    BackForwardCacheNotRestoredReason = "Dummy"
	BackForwardCacheNotRestoredReasonJSNetworkRequestReceivedCacheControlNoStoreResource      BackForwardCacheNotRestoredReason = "JsNetworkRequestReceivedCacheControlNoStoreResource"
	BackForwardCacheNotRestoredReasonWebRTCSticky                                             BackForwardCacheNotRestoredReason = "WebRTCSticky"
	BackForwardCacheNotRestoredReasonWebTransportSticky                                       BackForwardCacheNotRestoredReason = "WebTransportSticky"
	BackForwardCacheNotRestoredReasonWebSocketSticky                                          BackForwardCacheNotRestoredReason = "WebSocketSticky"
	BackForwardCacheNotRestoredReasonSmartCard                                                BackForwardCacheNotRestoredReason = "SmartCard"
	BackForwardCacheNotRestoredReasonLiveMediaStreamTrack                                     BackForwardCacheNotRestoredReason = "LiveMediaStreamTrack"
	BackForwardCacheNotRestoredReasonUnloadHandler                                            BackForwardCacheNotRestoredReason = "UnloadHandler"
	BackForwardCacheNotRestoredReasonParserAborted                                            BackForwardCacheNotRestoredReason = "ParserAborted"
	BackForwardCacheNotRestoredReasonContentSecurityHandler                                   BackForwardCacheNotRestoredReason = "ContentSecurityHandler"
	BackForwardCacheNotRestoredReasonContentWebAuthenticationAPI                              BackForwardCacheNotRestoredReason = "ContentWebAuthenticationAPI"
	BackForwardCacheNotRestoredReasonContentFileChooser                                       BackForwardCacheNotRestoredReason = "ContentFileChooser"
	BackForwardCacheNotRestoredReasonContentSerial                                            BackForwardCacheNotRestoredReason = "ContentSerial"
	BackForwardCacheNotRestoredReasonContentFileSystemAccess                                  BackForwardCacheNotRestoredReason = "ContentFileSystemAccess"
	BackForwardCacheNotRestoredReasonContentMediaDevicesDispatcherHost                        BackForwardCacheNotRestoredReason = "ContentMediaDevicesDispatcherHost"
	BackForwardCacheNotRestoredReasonContentWebBluetooth                                      BackForwardCacheNotRestoredReason = "ContentWebBluetooth"
	BackForwardCacheNotRestoredReasonContentWebUSB                                            BackForwardCacheNotRestoredReason = "ContentWebUSB"
	BackForwardCacheNotRestoredReasonContentMediaSessionService                               BackForwardCacheNotRestoredReason = "ContentMediaSessionService"
	BackForwardCacheNotRestoredReasonContentScreenReader                                      BackForwardCacheNotRestoredReason = "ContentScreenReader"
	BackForwardCacheNotRestoredReasonContentDiscarded                                         BackForwardCacheNotRestoredReason = "ContentDiscarded"
	BackForwardCacheNotRestoredReasonEmbedderPopupBlockerTabHelper                            BackForwardCacheNotRestoredReason = "EmbedderPopupBlockerTabHelper"
	BackForwardCacheNotRestoredReasonEmbedderSafeBrowsingTriggeredPopupBlocker                BackForwardCacheNotRestoredReason = "EmbedderSafeBrowsingTriggeredPopupBlocker"
	BackForwardCacheNotRestoredReasonEmbedderSafeBrowsingThreatDetails                        BackForwardCacheNotRestoredReason = "EmbedderSafeBrowsingThreatDetails"
	BackForwardCacheNotRestoredReasonEmbedderAppBannerManager                                 BackForwardCacheNotRestoredReason = "EmbedderAppBannerManager"
	BackForwardCacheNotRestoredReasonEmbedderDOMDistillerViewerSource                         BackForwardCacheNotRestoredReason = "EmbedderDomDistillerViewerSource"
	BackForwardCacheNotRestoredReasonEmbedderDOMDistillerSelfDeletingRequestDelegate          BackForwardCacheNotRestoredReason = "EmbedderDomDistillerSelfDeletingRequestDelegate"
	BackForwardCacheNotRestoredReasonEmbedderOomInterventionTabHelper                         BackForwardCacheNotRestoredReason = "EmbedderOomInterventionTabHelper"
	BackForwardCacheNotRestoredReasonEmbedderOfflinePage                                      BackForwardCacheNotRestoredReason = "EmbedderOfflinePage"
	BackForwardCacheNotRestoredReasonEmbedderChromePasswordManagerClientBindCredentialManager BackForwardCacheNotRestoredReason = "EmbedderChromePasswordManagerClientBindCredentialManager"
	BackForwardCacheNotRestoredReasonEmbedderPermissionRequestManager                         BackForwardCacheNotRestoredReason = "EmbedderPermissionRequestManager"
	BackForwardCacheNotRestoredReasonEmbedderModalDialog                                      BackForwardCacheNotRestoredReason = "EmbedderModalDialog"
	BackForwardCacheNotRestoredReasonEmbedderExtensions                                       BackForwardCacheNotRestoredReason = "EmbedderExtensions"
	BackForwardCacheNotRestoredReasonEmbedderExtensionMessaging                               BackForwardCacheNotRestoredReason = "EmbedderExtensionMessaging"
	BackForwardCacheNotRestoredReasonEmbedderExtensionMessagingForOpenPort                    BackForwardCacheNotRestoredReason = "EmbedderExtensionMessagingForOpenPort"
	BackForwardCacheNotRestoredReasonEmbedderExtensionSentMessageToCachedFrame                BackForwardCacheNotRestoredReason = "EmbedderExtensionSentMessageToCachedFrame"
	BackForwardCacheNotRestoredReasonRequestedByWebViewClient                                 BackForwardCacheNotRestoredReason = "RequestedByWebViewClient"
)

func (e BackForwardCacheNotRestoredReason) Valid() bool {
	switch e {
	case "NotPrimaryMainFrame", "BackForwardCacheDisabled", "RelatedActiveContentsExist", "HTTPStatusNotOK", "SchemeNotHTTPOrHTTPS", "Loading", "WasGrantedMediaAccess", "DisableForRenderFrameHostCalled", "DomainNotAllowed", "HTTPMethodNotGET", "SubframeIsNavigating", "Timeout", "CacheLimit", "JavaScriptExecution", "RendererProcessKilled", "RendererProcessCrashed", "SchedulerTrackedFeatureUsed", "ConflictingBrowsingInstance", "CacheFlushed", "ServiceWorkerVersionActivation", "SessionRestored", "ServiceWorkerPostMessage", "EnteredBackForwardCacheBeforeServiceWorkerHostAdded", "RenderFrameHostReused_SameSite", "RenderFrameHostReused_CrossSite", "ServiceWorkerClaim", "IgnoreEventAndEvict", "HaveInnerContents", "TimeoutPuttingInCache", "BackForwardCacheDisabledByLowMemory", "BackForwardCacheDisabledByCommandLine", "NetworkRequestDatapipeDrainedAsBytesConsumer", "NetworkRequestRedirected", "NetworkRequestTimeout", "NetworkExceedsBufferLimit", "NavigationCancelledWhileRestoring", "NotMostRecentNavigationEntry", "BackForwardCacheDisabledForPrerender", "UserAgentOverrideDiffers", "ForegroundCacheLimit", "BrowsingInstanceNotSwapped", "BackForwardCacheDisabledForDelegate", "UnloadHandlerExistsInMainFrame", "UnloadHandlerExistsInSubFrame", "ServiceWorkerUnregistration", "CacheControlNoStore", "CacheControlNoStoreCookieModified", "CacheControlNoStoreHTTPOnlyCookieModified", "NoResponseHead", "Unknown", "ActivationNavigationsDisallowedForBug1234857", "ErrorDocument", "FencedFramesEmbedder", "CookieDisabled", "HTTPAuthRequired", "CookieFlushed", "BroadcastChannelOnMessage", "WebViewSettingsChanged", "WebViewJavaScriptObjectChanged", "WebViewMessageListenerInjected", "WebViewSafeBrowsingAllowlistChanged", "WebViewDocumentStartJavascriptChanged", "WebSocket", "WebTransport", "WebRTC", "MainResourceHasCacheControlNoStore", "MainResourceHasCacheControlNoCache", "SubresourceHasCacheControlNoStore", "SubresourceHasCacheControlNoCache", "ContainsPlugins", "DocumentLoaded", "OutstandingNetworkRequestOthers", "RequestedMIDIPermission", "RequestedAudioCapturePermission", "RequestedVideoCapturePermission", "RequestedBackForwardCacheBlockedSensors", "RequestedBackgroundWorkPermission", "BroadcastChannel", "WebXR", "SharedWorker", "WebLocks", "WebHID", "WebShare", "RequestedStorageAccessGrant", "WebNfc", "OutstandingNetworkRequestFetch", "OutstandingNetworkRequestXHR", "AppBanner", "Printing", "WebDatabase", "PictureInPicture", "SpeechRecognizer", "IdleManager", "PaymentManager", "SpeechSynthesis", "KeyboardLock", "WebOTPService", "OutstandingNetworkRequestDirectSocket", "InjectedJavascript", "InjectedStyleSheet", "KeepaliveRequest", "IndexedDBEvent", "Dummy", "JsNetworkRequestReceivedCacheControlNoStoreResource", "WebRTCSticky", "WebTransportSticky", "WebSocketSticky", "SmartCard", "LiveMediaStreamTrack", "UnloadHandler", "ParserAborted", "ContentSecurityHandler", "ContentWebAuthenticationAPI", "ContentFileChooser", "ContentSerial", "ContentFileSystemAccess", "ContentMediaDevicesDispatcherHost", "ContentWebBluetooth", "ContentWebUSB", "ContentMediaSessionService", "ContentScreenReader", "ContentDiscarded", "EmbedderPopupBlockerTabHelper", "EmbedderSafeBrowsingTriggeredPopupBlocker", "EmbedderSafeBrowsingThreatDetails", "EmbedderAppBannerManager", "EmbedderDomDistillerViewerSource", "EmbedderDomDistillerSelfDeletingRequestDelegate", "EmbedderOomInterventionTabHelper", "EmbedderOfflinePage", "EmbedderChromePasswordManagerClientBindCredentialManager", "EmbedderPermissionRequestManager", "EmbedderModalDialog", "EmbedderExtensions", "EmbedderExtensionMessaging", "EmbedderExtensionMessagingForOpenPort", "EmbedderExtensionSentMessageToCachedFrame", "RequestedByWebViewClient":
		return true
	default:
		return false
	}
}

func (e BackForwardCacheNotRestoredReason) String() string {
	return string(e)
}

// BackForwardCacheNotRestoredReasonType Types of not restored reasons for
// back-forward cache.
//
// Note: This type is experimental.
type BackForwardCacheNotRestoredReasonType string

// BackForwardCacheNotRestoredReasonType as enums.
const (
	BackForwardCacheNotRestoredReasonTypeNotSet            BackForwardCacheNotRestoredReasonType = ""
	BackForwardCacheNotRestoredReasonTypeSupportPending    BackForwardCacheNotRestoredReasonType = "SupportPending"
	BackForwardCacheNotRestoredReasonTypePageSupportNeeded BackForwardCacheNotRestoredReasonType = "PageSupportNeeded"
	BackForwardCacheNotRestoredReasonTypeCircumstantial    BackForwardCacheNotRestoredReasonType = "Circumstantial"
)

func (e BackForwardCacheNotRestoredReasonType) Valid() bool {
	switch e {
	case "SupportPending", "PageSupportNeeded", "Circumstantial":
		return true
	default:
		return false
	}
}

func (e BackForwardCacheNotRestoredReasonType) String() string {
	return string(e)
}

// BackForwardCacheBlockingDetails
//
// Note: This type is experimental.
type BackForwardCacheBlockingDetails struct {
	URL          *string `json:"url,omitempty"`      // Url of the file where blockage happened. Optional because of tests.
	Function     *string `json:"function,omitempty"` // Function name where blockage happened. Optional because of anonymous functions and tests.
	LineNumber   int     `json:"lineNumber"`         // Line number in the script (0-based).
	ColumnNumber int     `json:"columnNumber"`       // Column number in the script (0-based).
}

// BackForwardCacheNotRestoredExplanation
//
// Note: This type is experimental.
type BackForwardCacheNotRestoredExplanation struct {
	Type    BackForwardCacheNotRestoredReasonType `json:"type"`              // Type of the reason
	Reason  BackForwardCacheNotRestoredReason     `json:"reason"`            // Not restored reason
	Context *string                               `json:"context,omitempty"` // Context associated with the reason. The meaning of this context is dependent on the reason: - EmbedderExtensionSentMessageToCachedFrame: the extension ID.
	Details []BackForwardCacheBlockingDetails     `json:"details,omitempty"` // No description.
}

// BackForwardCacheNotRestoredExplanationTree
//
// Note: This type is experimental.
type BackForwardCacheNotRestoredExplanationTree struct {
	URL          string                                       `json:"url"`          // URL of each frame
	Explanations []BackForwardCacheNotRestoredExplanation     `json:"explanations"` // Not restored reasons of each frame
	Children     []BackForwardCacheNotRestoredExplanationTree `json:"children"`     // Array of children frame
}
