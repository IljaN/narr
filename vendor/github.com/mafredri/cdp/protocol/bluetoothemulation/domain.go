// Code generated by cdpgen. DO NOT EDIT.

// Package bluetoothemulation implements the BluetoothEmulation domain. This
// domain allows configuring virtual Bluetooth devices to test the
// web-bluetooth API.
package bluetoothemulation

import (
	"context"

	"github.com/mafredri/cdp/protocol/internal"
	"github.com/mafredri/cdp/rpcc"
)

// domainClient is a client for the BluetoothEmulation domain. This domain
// allows configuring virtual Bluetooth devices to test the web-bluetooth API.
type domainClient struct{ conn *rpcc.Conn }

// NewClient returns a client for the BluetoothEmulation domain with the connection set to conn.
func NewClient(conn *rpcc.Conn) *domainClient {
	return &domainClient{conn: conn}
}

// Enable invokes the BluetoothEmulation method. Enable the BluetoothEmulation
// domain.
func (d *domainClient) Enable(ctx context.Context, args *EnableArgs) (err error) {
	if args != nil {
		err = rpcc.Invoke(ctx, "BluetoothEmulation.enable", args, nil, d.conn)
	} else {
		err = rpcc.Invoke(ctx, "BluetoothEmulation.enable", nil, nil, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "BluetoothEmulation", Op: "Enable", Err: err}
	}
	return
}

// Disable invokes the BluetoothEmulation method. Disable the
// BluetoothEmulation domain.
func (d *domainClient) Disable(ctx context.Context) (err error) {
	err = rpcc.Invoke(ctx, "BluetoothEmulation.disable", nil, nil, d.conn)
	if err != nil {
		err = &internal.OpError{Domain: "BluetoothEmulation", Op: "Disable", Err: err}
	}
	return
}

// SimulatePreconnectedPeripheral invokes the BluetoothEmulation method.
// Simulates a peripheral with |address|, |name| and |knownServiceUuids| that
// has already been connected to the system.
func (d *domainClient) SimulatePreconnectedPeripheral(ctx context.Context, args *SimulatePreconnectedPeripheralArgs) (err error) {
	if args != nil {
		err = rpcc.Invoke(ctx, "BluetoothEmulation.simulatePreconnectedPeripheral", args, nil, d.conn)
	} else {
		err = rpcc.Invoke(ctx, "BluetoothEmulation.simulatePreconnectedPeripheral", nil, nil, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "BluetoothEmulation", Op: "SimulatePreconnectedPeripheral", Err: err}
	}
	return
}

// SimulateAdvertisement invokes the BluetoothEmulation method. Simulates an
// advertisement packet described in |entry| being received by the central.
func (d *domainClient) SimulateAdvertisement(ctx context.Context, args *SimulateAdvertisementArgs) (err error) {
	if args != nil {
		err = rpcc.Invoke(ctx, "BluetoothEmulation.simulateAdvertisement", args, nil, d.conn)
	} else {
		err = rpcc.Invoke(ctx, "BluetoothEmulation.simulateAdvertisement", nil, nil, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "BluetoothEmulation", Op: "SimulateAdvertisement", Err: err}
	}
	return
}
