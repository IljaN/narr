// Code generated by cdpgen. DO NOT EDIT.

package audits

import (
	"github.com/mafredri/cdp/protocol/dom"
	"github.com/mafredri/cdp/protocol/network"
	"github.com/mafredri/cdp/protocol/page"
	"github.com/mafredri/cdp/protocol/runtime"
)

// AffectedCookie Information about a cookie that is affected by an inspector
// issue.
type AffectedCookie struct {
	Name   string `json:"name"`   // The following three properties uniquely identify a cookie
	Path   string `json:"path"`   // No description.
	Domain string `json:"domain"` // No description.
}

// AffectedRequest Information about a request that is affected by an
// inspector issue.
type AffectedRequest struct {
	RequestID network.RequestID `json:"requestId"`     // The unique request id.
	URL       *string           `json:"url,omitempty"` // No description.
}

// AffectedFrame Information about the frame affected by an inspector issue.
type AffectedFrame struct {
	FrameID page.FrameID `json:"frameId"` // No description.
}

// CookieExclusionReason
type CookieExclusionReason string

// CookieExclusionReason as enums.
const (
	CookieExclusionReasonNotSet                                        CookieExclusionReason = ""
	CookieExclusionReasonExcludeSameSiteUnspecifiedTreatedAsLax        CookieExclusionReason = "ExcludeSameSiteUnspecifiedTreatedAsLax"
	CookieExclusionReasonExcludeSameSiteNoneInsecure                   CookieExclusionReason = "ExcludeSameSiteNoneInsecure"
	CookieExclusionReasonExcludeSameSiteLax                            CookieExclusionReason = "ExcludeSameSiteLax"
	CookieExclusionReasonExcludeSameSiteStrict                         CookieExclusionReason = "ExcludeSameSiteStrict"
	CookieExclusionReasonExcludeInvalidSameParty                       CookieExclusionReason = "ExcludeInvalidSameParty"
	CookieExclusionReasonExcludeSamePartyCrossPartyContext             CookieExclusionReason = "ExcludeSamePartyCrossPartyContext"
	CookieExclusionReasonExcludeDomainNonASCII                         CookieExclusionReason = "ExcludeDomainNonASCII"
	CookieExclusionReasonExcludeThirdPartyCookieBlockedInFirstPartySet CookieExclusionReason = "ExcludeThirdPartyCookieBlockedInFirstPartySet"
	CookieExclusionReasonExcludeThirdPartyPhaseout                     CookieExclusionReason = "ExcludeThirdPartyPhaseout"
)

func (e CookieExclusionReason) Valid() bool {
	switch e {
	case "ExcludeSameSiteUnspecifiedTreatedAsLax", "ExcludeSameSiteNoneInsecure", "ExcludeSameSiteLax", "ExcludeSameSiteStrict", "ExcludeInvalidSameParty", "ExcludeSamePartyCrossPartyContext", "ExcludeDomainNonASCII", "ExcludeThirdPartyCookieBlockedInFirstPartySet", "ExcludeThirdPartyPhaseout":
		return true
	default:
		return false
	}
}

func (e CookieExclusionReason) String() string {
	return string(e)
}

// CookieWarningReason
type CookieWarningReason string

// CookieWarningReason as enums.
const (
	CookieWarningReasonNotSet                                         CookieWarningReason = ""
	CookieWarningReasonWarnSameSiteUnspecifiedCrossSiteContext        CookieWarningReason = "WarnSameSiteUnspecifiedCrossSiteContext"
	CookieWarningReasonWarnSameSiteNoneInsecure                       CookieWarningReason = "WarnSameSiteNoneInsecure"
	CookieWarningReasonWarnSameSiteUnspecifiedLaxAllowUnsafe          CookieWarningReason = "WarnSameSiteUnspecifiedLaxAllowUnsafe"
	CookieWarningReasonWarnSameSiteStrictLaxDowngradeStrict           CookieWarningReason = "WarnSameSiteStrictLaxDowngradeStrict"
	CookieWarningReasonWarnSameSiteStrictCrossDowngradeStrict         CookieWarningReason = "WarnSameSiteStrictCrossDowngradeStrict"
	CookieWarningReasonWarnSameSiteStrictCrossDowngradeLax            CookieWarningReason = "WarnSameSiteStrictCrossDowngradeLax"
	CookieWarningReasonWarnSameSiteLaxCrossDowngradeStrict            CookieWarningReason = "WarnSameSiteLaxCrossDowngradeStrict"
	CookieWarningReasonWarnSameSiteLaxCrossDowngradeLax               CookieWarningReason = "WarnSameSiteLaxCrossDowngradeLax"
	CookieWarningReasonWarnAttributeValueExceedsMaxSize               CookieWarningReason = "WarnAttributeValueExceedsMaxSize"
	CookieWarningReasonWarnDomainNonASCII                             CookieWarningReason = "WarnDomainNonASCII"
	CookieWarningReasonWarnThirdPartyPhaseout                         CookieWarningReason = "WarnThirdPartyPhaseout"
	CookieWarningReasonWarnCrossSiteRedirectDowngradeChangesInclusion CookieWarningReason = "WarnCrossSiteRedirectDowngradeChangesInclusion"
)

func (e CookieWarningReason) Valid() bool {
	switch e {
	case "WarnSameSiteUnspecifiedCrossSiteContext", "WarnSameSiteNoneInsecure", "WarnSameSiteUnspecifiedLaxAllowUnsafe", "WarnSameSiteStrictLaxDowngradeStrict", "WarnSameSiteStrictCrossDowngradeStrict", "WarnSameSiteStrictCrossDowngradeLax", "WarnSameSiteLaxCrossDowngradeStrict", "WarnSameSiteLaxCrossDowngradeLax", "WarnAttributeValueExceedsMaxSize", "WarnDomainNonASCII", "WarnThirdPartyPhaseout", "WarnCrossSiteRedirectDowngradeChangesInclusion":
		return true
	default:
		return false
	}
}

func (e CookieWarningReason) String() string {
	return string(e)
}

// CookieOperation
type CookieOperation string

// CookieOperation as enums.
const (
	CookieOperationNotSet     CookieOperation = ""
	CookieOperationSetCookie  CookieOperation = "SetCookie"
	CookieOperationReadCookie CookieOperation = "ReadCookie"
)

func (e CookieOperation) Valid() bool {
	switch e {
	case "SetCookie", "ReadCookie":
		return true
	default:
		return false
	}
}

func (e CookieOperation) String() string {
	return string(e)
}

// CookieIssueDetails This information is currently necessary, as the
// front-end has a difficult time finding a specific cookie. With this, we can
// convey specific error information without the cookie.
type CookieIssueDetails struct {
	Cookie                 *AffectedCookie         `json:"cookie,omitempty"`         // If AffectedCookie is not set then rawCookieLine contains the raw Set-Cookie header string. This hints at a problem where the cookie line is syntactically or semantically malformed in a way that no valid cookie could be created.
	RawCookieLine          *string                 `json:"rawCookieLine,omitempty"`  // No description.
	CookieWarningReasons   []CookieWarningReason   `json:"cookieWarningReasons"`     // No description.
	CookieExclusionReasons []CookieExclusionReason `json:"cookieExclusionReasons"`   // No description.
	Operation              CookieOperation         `json:"operation"`                // Optionally identifies the site-for-cookies and the cookie url, which may be used by the front-end as additional context.
	SiteForCookies         *string                 `json:"siteForCookies,omitempty"` // No description.
	CookieURL              *string                 `json:"cookieUrl,omitempty"`      // No description.
	Request                *AffectedRequest        `json:"request,omitempty"`        // No description.
}

// MixedContentResolutionStatus
type MixedContentResolutionStatus string

// MixedContentResolutionStatus as enums.
const (
	MixedContentResolutionStatusNotSet                            MixedContentResolutionStatus = ""
	MixedContentResolutionStatusMixedContentBlocked               MixedContentResolutionStatus = "MixedContentBlocked"
	MixedContentResolutionStatusMixedContentAutomaticallyUpgraded MixedContentResolutionStatus = "MixedContentAutomaticallyUpgraded"
	MixedContentResolutionStatusMixedContentWarning               MixedContentResolutionStatus = "MixedContentWarning"
)

func (e MixedContentResolutionStatus) Valid() bool {
	switch e {
	case "MixedContentBlocked", "MixedContentAutomaticallyUpgraded", "MixedContentWarning":
		return true
	default:
		return false
	}
}

func (e MixedContentResolutionStatus) String() string {
	return string(e)
}

// MixedContentResourceType
type MixedContentResourceType string

// MixedContentResourceType as enums.
const (
	MixedContentResourceTypeNotSet           MixedContentResourceType = ""
	MixedContentResourceTypeAttributionSrc   MixedContentResourceType = "AttributionSrc"
	MixedContentResourceTypeAudio            MixedContentResourceType = "Audio"
	MixedContentResourceTypeBeacon           MixedContentResourceType = "Beacon"
	MixedContentResourceTypeCSPReport        MixedContentResourceType = "CSPReport"
	MixedContentResourceTypeDownload         MixedContentResourceType = "Download"
	MixedContentResourceTypeEventSource      MixedContentResourceType = "EventSource"
	MixedContentResourceTypeFavicon          MixedContentResourceType = "Favicon"
	MixedContentResourceTypeFont             MixedContentResourceType = "Font"
	MixedContentResourceTypeForm             MixedContentResourceType = "Form"
	MixedContentResourceTypeFrame            MixedContentResourceType = "Frame"
	MixedContentResourceTypeImage            MixedContentResourceType = "Image"
	MixedContentResourceTypeImport           MixedContentResourceType = "Import"
	MixedContentResourceTypeJSON             MixedContentResourceType = "JSON"
	MixedContentResourceTypeManifest         MixedContentResourceType = "Manifest"
	MixedContentResourceTypePing             MixedContentResourceType = "Ping"
	MixedContentResourceTypePluginData       MixedContentResourceType = "PluginData"
	MixedContentResourceTypePluginResource   MixedContentResourceType = "PluginResource"
	MixedContentResourceTypePrefetch         MixedContentResourceType = "Prefetch"
	MixedContentResourceTypeResource         MixedContentResourceType = "Resource"
	MixedContentResourceTypeScript           MixedContentResourceType = "Script"
	MixedContentResourceTypeServiceWorker    MixedContentResourceType = "ServiceWorker"
	MixedContentResourceTypeSharedWorker     MixedContentResourceType = "SharedWorker"
	MixedContentResourceTypeSpeculationRules MixedContentResourceType = "SpeculationRules"
	MixedContentResourceTypeStylesheet       MixedContentResourceType = "Stylesheet"
	MixedContentResourceTypeTrack            MixedContentResourceType = "Track"
	MixedContentResourceTypeVideo            MixedContentResourceType = "Video"
	MixedContentResourceTypeWorker           MixedContentResourceType = "Worker"
	MixedContentResourceTypeXMLHttpRequest   MixedContentResourceType = "XMLHttpRequest"
	MixedContentResourceTypeXSLT             MixedContentResourceType = "XSLT"
)

func (e MixedContentResourceType) Valid() bool {
	switch e {
	case "AttributionSrc", "Audio", "Beacon", "CSPReport", "Download", "EventSource", "Favicon", "Font", "Form", "Frame", "Image", "Import", "JSON", "Manifest", "Ping", "PluginData", "PluginResource", "Prefetch", "Resource", "Script", "ServiceWorker", "SharedWorker", "SpeculationRules", "Stylesheet", "Track", "Video", "Worker", "XMLHttpRequest", "XSLT":
		return true
	default:
		return false
	}
}

func (e MixedContentResourceType) String() string {
	return string(e)
}

// MixedContentIssueDetails
type MixedContentIssueDetails struct {
	ResourceType     MixedContentResourceType     `json:"resourceType,omitempty"` // The type of resource causing the mixed content issue (css, js, iframe, form,...). Marked as optional because it is mapped to from blink::mojom::RequestContextType, which will be replaced by network::mojom::RequestDestination
	ResolutionStatus MixedContentResolutionStatus `json:"resolutionStatus"`       // The way the mixed content issue is being resolved.
	InsecureURL      string                       `json:"insecureURL"`            // The unsafe http url causing the mixed content issue.
	MainResourceURL  string                       `json:"mainResourceURL"`        // The url responsible for the call to an unsafe url.
	Request          *AffectedRequest             `json:"request,omitempty"`      // The mixed content request. Does not always exist (e.g. for unsafe form submission urls).
	Frame            *AffectedFrame               `json:"frame,omitempty"`        // Optional because not every mixed content issue is necessarily linked to a frame.
}

// BlockedByResponseReason Enum indicating the reason a response has been
// blocked. These reasons are refinements of the net error BLOCKED_BY_RESPONSE.
type BlockedByResponseReason string

// BlockedByResponseReason as enums.
const (
	BlockedByResponseReasonNotSet                                                  BlockedByResponseReason = ""
	BlockedByResponseReasonCOEPFrameResourceNeedsCOEPHeader                        BlockedByResponseReason = "CoepFrameResourceNeedsCoepHeader"
	BlockedByResponseReasonCOOPSandboxedIFrameCannotNavigateToCOOPPage             BlockedByResponseReason = "CoopSandboxedIFrameCannotNavigateToCoopPage"
	BlockedByResponseReasonCORPNotSameOrigin                                       BlockedByResponseReason = "CorpNotSameOrigin"
	BlockedByResponseReasonCORPNotSameOriginAfterDefaultedToSameOriginByCOEP       BlockedByResponseReason = "CorpNotSameOriginAfterDefaultedToSameOriginByCoep"
	BlockedByResponseReasonCORPNotSameOriginAfterDefaultedToSameOriginByDIP        BlockedByResponseReason = "CorpNotSameOriginAfterDefaultedToSameOriginByDip"
	BlockedByResponseReasonCORPNotSameOriginAfterDefaultedToSameOriginByCOEPAndDIP BlockedByResponseReason = "CorpNotSameOriginAfterDefaultedToSameOriginByCoepAndDip"
	BlockedByResponseReasonCORPNotSameSite                                         BlockedByResponseReason = "CorpNotSameSite"
)

func (e BlockedByResponseReason) Valid() bool {
	switch e {
	case "CoepFrameResourceNeedsCoepHeader", "CoopSandboxedIFrameCannotNavigateToCoopPage", "CorpNotSameOrigin", "CorpNotSameOriginAfterDefaultedToSameOriginByCoep", "CorpNotSameOriginAfterDefaultedToSameOriginByDip", "CorpNotSameOriginAfterDefaultedToSameOriginByCoepAndDip", "CorpNotSameSite":
		return true
	default:
		return false
	}
}

func (e BlockedByResponseReason) String() string {
	return string(e)
}

// BlockedByResponseIssueDetails Details for a request that has been blocked
// with the BLOCKED_BY_RESPONSE code. Currently only used for COEP/COOP, but
// may be extended to include some CSP errors in the future.
type BlockedByResponseIssueDetails struct {
	Request      AffectedRequest         `json:"request"`                // No description.
	ParentFrame  *AffectedFrame          `json:"parentFrame,omitempty"`  // No description.
	BlockedFrame *AffectedFrame          `json:"blockedFrame,omitempty"` // No description.
	Reason       BlockedByResponseReason `json:"reason"`                 // No description.
}

// HeavyAdResolutionStatus
type HeavyAdResolutionStatus string

// HeavyAdResolutionStatus as enums.
const (
	HeavyAdResolutionStatusNotSet         HeavyAdResolutionStatus = ""
	HeavyAdResolutionStatusHeavyAdBlocked HeavyAdResolutionStatus = "HeavyAdBlocked"
	HeavyAdResolutionStatusHeavyAdWarning HeavyAdResolutionStatus = "HeavyAdWarning"
)

func (e HeavyAdResolutionStatus) Valid() bool {
	switch e {
	case "HeavyAdBlocked", "HeavyAdWarning":
		return true
	default:
		return false
	}
}

func (e HeavyAdResolutionStatus) String() string {
	return string(e)
}

// HeavyAdReason
type HeavyAdReason string

// HeavyAdReason as enums.
const (
	HeavyAdReasonNotSet            HeavyAdReason = ""
	HeavyAdReasonNetworkTotalLimit HeavyAdReason = "NetworkTotalLimit"
	HeavyAdReasonCPUTotalLimit     HeavyAdReason = "CpuTotalLimit"
	HeavyAdReasonCPUPeakLimit      HeavyAdReason = "CpuPeakLimit"
)

func (e HeavyAdReason) Valid() bool {
	switch e {
	case "NetworkTotalLimit", "CpuTotalLimit", "CpuPeakLimit":
		return true
	default:
		return false
	}
}

func (e HeavyAdReason) String() string {
	return string(e)
}

// HeavyAdIssueDetails
type HeavyAdIssueDetails struct {
	Resolution HeavyAdResolutionStatus `json:"resolution"` // The resolution status, either blocking the content or warning.
	Reason     HeavyAdReason           `json:"reason"`     // The reason the ad was blocked, total network or cpu or peak cpu.
	Frame      AffectedFrame           `json:"frame"`      // The frame that was blocked.
}

// ContentSecurityPolicyViolationType
type ContentSecurityPolicyViolationType string

// ContentSecurityPolicyViolationType as enums.
const (
	ContentSecurityPolicyViolationTypeNotSet                       ContentSecurityPolicyViolationType = ""
	ContentSecurityPolicyViolationTypeKInlineViolation             ContentSecurityPolicyViolationType = "kInlineViolation"
	ContentSecurityPolicyViolationTypeKEvalViolation               ContentSecurityPolicyViolationType = "kEvalViolation"
	ContentSecurityPolicyViolationTypeKURLViolation                ContentSecurityPolicyViolationType = "kURLViolation"
	ContentSecurityPolicyViolationTypeKTrustedTypesSinkViolation   ContentSecurityPolicyViolationType = "kTrustedTypesSinkViolation"
	ContentSecurityPolicyViolationTypeKTrustedTypesPolicyViolation ContentSecurityPolicyViolationType = "kTrustedTypesPolicyViolation"
	ContentSecurityPolicyViolationTypeKWasmEvalViolation           ContentSecurityPolicyViolationType = "kWasmEvalViolation"
)

func (e ContentSecurityPolicyViolationType) Valid() bool {
	switch e {
	case "kInlineViolation", "kEvalViolation", "kURLViolation", "kTrustedTypesSinkViolation", "kTrustedTypesPolicyViolation", "kWasmEvalViolation":
		return true
	default:
		return false
	}
}

func (e ContentSecurityPolicyViolationType) String() string {
	return string(e)
}

// SourceCodeLocation
type SourceCodeLocation struct {
	ScriptID     *runtime.ScriptID `json:"scriptId,omitempty"` // No description.
	URL          string            `json:"url"`                // No description.
	LineNumber   int               `json:"lineNumber"`         // No description.
	ColumnNumber int               `json:"columnNumber"`       // No description.
}

// ContentSecurityPolicyIssueDetails
type ContentSecurityPolicyIssueDetails struct {
	BlockedURL                         *string                            `json:"blockedURL,omitempty"`               // The url not included in allowed sources.
	ViolatedDirective                  string                             `json:"violatedDirective"`                  // Specific directive that is violated, causing the CSP issue.
	IsReportOnly                       bool                               `json:"isReportOnly"`                       // No description.
	ContentSecurityPolicyViolationType ContentSecurityPolicyViolationType `json:"contentSecurityPolicyViolationType"` // No description.
	FrameAncestor                      *AffectedFrame                     `json:"frameAncestor,omitempty"`            // No description.
	SourceCodeLocation                 *SourceCodeLocation                `json:"sourceCodeLocation,omitempty"`       // No description.
	ViolatingNodeID                    *dom.BackendNodeID                 `json:"violatingNodeId,omitempty"`          // No description.
}

// SharedArrayBufferIssueType
type SharedArrayBufferIssueType string

// SharedArrayBufferIssueType as enums.
const (
	SharedArrayBufferIssueTypeNotSet        SharedArrayBufferIssueType = ""
	SharedArrayBufferIssueTypeTransferIssue SharedArrayBufferIssueType = "TransferIssue"
	SharedArrayBufferIssueTypeCreationIssue SharedArrayBufferIssueType = "CreationIssue"
)

func (e SharedArrayBufferIssueType) Valid() bool {
	switch e {
	case "TransferIssue", "CreationIssue":
		return true
	default:
		return false
	}
}

func (e SharedArrayBufferIssueType) String() string {
	return string(e)
}

// SharedArrayBufferIssueDetails Details for a issue arising from an SAB being
// instantiated in, or transferred to a context that is not cross-origin
// isolated.
type SharedArrayBufferIssueDetails struct {
	SourceCodeLocation SourceCodeLocation         `json:"sourceCodeLocation"` // No description.
	IsWarning          bool                       `json:"isWarning"`          // No description.
	Type               SharedArrayBufferIssueType `json:"type"`               // No description.
}

// LowTextContrastIssueDetails
type LowTextContrastIssueDetails struct {
	ViolatingNodeID       dom.BackendNodeID `json:"violatingNodeId"`       // No description.
	ViolatingNodeSelector string            `json:"violatingNodeSelector"` // No description.
	ContrastRatio         float64           `json:"contrastRatio"`         // No description.
	ThresholdAA           float64           `json:"thresholdAA"`           // No description.
	ThresholdAAA          float64           `json:"thresholdAAA"`          // No description.
	FontSize              string            `json:"fontSize"`              // No description.
	FontWeight            string            `json:"fontWeight"`            // No description.
}

// CORSIssueDetails Details for a CORS related issue, e.g. a warning or error
// related to CORS RFC1918 enforcement.
type CORSIssueDetails struct {
	CORSErrorStatus        network.CORSErrorStatus      `json:"corsErrorStatus"`                  // No description.
	IsWarning              bool                         `json:"isWarning"`                        // No description.
	Request                AffectedRequest              `json:"request"`                          // No description.
	Location               *SourceCodeLocation          `json:"location,omitempty"`               // No description.
	InitiatorOrigin        *string                      `json:"initiatorOrigin,omitempty"`        // No description.
	ResourceIPAddressSpace *network.IPAddressSpace      `json:"resourceIPAddressSpace,omitempty"` // No description.
	ClientSecurityState    *network.ClientSecurityState `json:"clientSecurityState,omitempty"`    // No description.
}

// AttributionReportingIssueType
type AttributionReportingIssueType string

// AttributionReportingIssueType as enums.
const (
	AttributionReportingIssueTypeNotSet                                               AttributionReportingIssueType = ""
	AttributionReportingIssueTypePermissionPolicyDisabled                             AttributionReportingIssueType = "PermissionPolicyDisabled"
	AttributionReportingIssueTypeUntrustworthyReportingOrigin                         AttributionReportingIssueType = "UntrustworthyReportingOrigin"
	AttributionReportingIssueTypeInsecureContext                                      AttributionReportingIssueType = "InsecureContext"
	AttributionReportingIssueTypeInvalidHeader                                        AttributionReportingIssueType = "InvalidHeader"
	AttributionReportingIssueTypeInvalidRegisterTriggerHeader                         AttributionReportingIssueType = "InvalidRegisterTriggerHeader"
	AttributionReportingIssueTypeSourceAndTriggerHeaders                              AttributionReportingIssueType = "SourceAndTriggerHeaders"
	AttributionReportingIssueTypeSourceIgnored                                        AttributionReportingIssueType = "SourceIgnored"
	AttributionReportingIssueTypeTriggerIgnored                                       AttributionReportingIssueType = "TriggerIgnored"
	AttributionReportingIssueTypeOSSourceIgnored                                      AttributionReportingIssueType = "OsSourceIgnored"
	AttributionReportingIssueTypeOSTriggerIgnored                                     AttributionReportingIssueType = "OsTriggerIgnored"
	AttributionReportingIssueTypeInvalidRegisterOSSourceHeader                        AttributionReportingIssueType = "InvalidRegisterOsSourceHeader"
	AttributionReportingIssueTypeInvalidRegisterOSTriggerHeader                       AttributionReportingIssueType = "InvalidRegisterOsTriggerHeader"
	AttributionReportingIssueTypeWebAndOSHeaders                                      AttributionReportingIssueType = "WebAndOsHeaders"
	AttributionReportingIssueTypeNoWebOrOSSupport                                     AttributionReportingIssueType = "NoWebOrOsSupport"
	AttributionReportingIssueTypeNavigationRegistrationWithoutTransientUserActivation AttributionReportingIssueType = "NavigationRegistrationWithoutTransientUserActivation"
	AttributionReportingIssueTypeInvalidInfoHeader                                    AttributionReportingIssueType = "InvalidInfoHeader"
	AttributionReportingIssueTypeNoRegisterSourceHeader                               AttributionReportingIssueType = "NoRegisterSourceHeader"
	AttributionReportingIssueTypeNoRegisterTriggerHeader                              AttributionReportingIssueType = "NoRegisterTriggerHeader"
	AttributionReportingIssueTypeNoRegisterOSSourceHeader                             AttributionReportingIssueType = "NoRegisterOsSourceHeader"
	AttributionReportingIssueTypeNoRegisterOSTriggerHeader                            AttributionReportingIssueType = "NoRegisterOsTriggerHeader"
	AttributionReportingIssueTypeNavigationRegistrationUniqueScopeAlreadySet          AttributionReportingIssueType = "NavigationRegistrationUniqueScopeAlreadySet"
)

func (e AttributionReportingIssueType) Valid() bool {
	switch e {
	case "PermissionPolicyDisabled", "UntrustworthyReportingOrigin", "InsecureContext", "InvalidHeader", "InvalidRegisterTriggerHeader", "SourceAndTriggerHeaders", "SourceIgnored", "TriggerIgnored", "OsSourceIgnored", "OsTriggerIgnored", "InvalidRegisterOsSourceHeader", "InvalidRegisterOsTriggerHeader", "WebAndOsHeaders", "NoWebOrOsSupport", "NavigationRegistrationWithoutTransientUserActivation", "InvalidInfoHeader", "NoRegisterSourceHeader", "NoRegisterTriggerHeader", "NoRegisterOsSourceHeader", "NoRegisterOsTriggerHeader", "NavigationRegistrationUniqueScopeAlreadySet":
		return true
	default:
		return false
	}
}

func (e AttributionReportingIssueType) String() string {
	return string(e)
}

// SharedDictionaryError
type SharedDictionaryError string

// SharedDictionaryError as enums.
const (
	SharedDictionaryErrorNotSet                                    SharedDictionaryError = ""
	SharedDictionaryErrorUseErrorCrossOriginNoCORSRequest          SharedDictionaryError = "UseErrorCrossOriginNoCorsRequest"
	SharedDictionaryErrorUseErrorDictionaryLoadFailure             SharedDictionaryError = "UseErrorDictionaryLoadFailure"
	SharedDictionaryErrorUseErrorMatchingDictionaryNotUsed         SharedDictionaryError = "UseErrorMatchingDictionaryNotUsed"
	SharedDictionaryErrorUseErrorUnexpectedContentDictionaryHeader SharedDictionaryError = "UseErrorUnexpectedContentDictionaryHeader"
	SharedDictionaryErrorWriteErrorCossOriginNoCORSRequest         SharedDictionaryError = "WriteErrorCossOriginNoCorsRequest"
	SharedDictionaryErrorWriteErrorDisallowedBySettings            SharedDictionaryError = "WriteErrorDisallowedBySettings"
	SharedDictionaryErrorWriteErrorExpiredResponse                 SharedDictionaryError = "WriteErrorExpiredResponse"
	SharedDictionaryErrorWriteErrorFeatureDisabled                 SharedDictionaryError = "WriteErrorFeatureDisabled"
	SharedDictionaryErrorWriteErrorInsufficientResources           SharedDictionaryError = "WriteErrorInsufficientResources"
	SharedDictionaryErrorWriteErrorInvalidMatchField               SharedDictionaryError = "WriteErrorInvalidMatchField"
	SharedDictionaryErrorWriteErrorInvalidStructuredHeader         SharedDictionaryError = "WriteErrorInvalidStructuredHeader"
	SharedDictionaryErrorWriteErrorNavigationRequest               SharedDictionaryError = "WriteErrorNavigationRequest"
	SharedDictionaryErrorWriteErrorNoMatchField                    SharedDictionaryError = "WriteErrorNoMatchField"
	SharedDictionaryErrorWriteErrorNonListMatchDestField           SharedDictionaryError = "WriteErrorNonListMatchDestField"
	SharedDictionaryErrorWriteErrorNonSecureContext                SharedDictionaryError = "WriteErrorNonSecureContext"
	SharedDictionaryErrorWriteErrorNonStringIDField                SharedDictionaryError = "WriteErrorNonStringIdField"
	SharedDictionaryErrorWriteErrorNonStringInMatchDestList        SharedDictionaryError = "WriteErrorNonStringInMatchDestList"
	SharedDictionaryErrorWriteErrorNonStringMatchField             SharedDictionaryError = "WriteErrorNonStringMatchField"
	SharedDictionaryErrorWriteErrorNonTokenTypeField               SharedDictionaryError = "WriteErrorNonTokenTypeField"
	SharedDictionaryErrorWriteErrorRequestAborted                  SharedDictionaryError = "WriteErrorRequestAborted"
	SharedDictionaryErrorWriteErrorShuttingDown                    SharedDictionaryError = "WriteErrorShuttingDown"
	SharedDictionaryErrorWriteErrorTooLongIDField                  SharedDictionaryError = "WriteErrorTooLongIdField"
	SharedDictionaryErrorWriteErrorUnsupportedType                 SharedDictionaryError = "WriteErrorUnsupportedType"
)

func (e SharedDictionaryError) Valid() bool {
	switch e {
	case "UseErrorCrossOriginNoCorsRequest", "UseErrorDictionaryLoadFailure", "UseErrorMatchingDictionaryNotUsed", "UseErrorUnexpectedContentDictionaryHeader", "WriteErrorCossOriginNoCorsRequest", "WriteErrorDisallowedBySettings", "WriteErrorExpiredResponse", "WriteErrorFeatureDisabled", "WriteErrorInsufficientResources", "WriteErrorInvalidMatchField", "WriteErrorInvalidStructuredHeader", "WriteErrorNavigationRequest", "WriteErrorNoMatchField", "WriteErrorNonListMatchDestField", "WriteErrorNonSecureContext", "WriteErrorNonStringIdField", "WriteErrorNonStringInMatchDestList", "WriteErrorNonStringMatchField", "WriteErrorNonTokenTypeField", "WriteErrorRequestAborted", "WriteErrorShuttingDown", "WriteErrorTooLongIdField", "WriteErrorUnsupportedType":
		return true
	default:
		return false
	}
}

func (e SharedDictionaryError) String() string {
	return string(e)
}

// AttributionReportingIssueDetails Details for issues around "Attribution
// Reporting API" usage. Explainer:
// https://github.com/WICG/attribution-reporting-api
type AttributionReportingIssueDetails struct {
	ViolationType    AttributionReportingIssueType `json:"violationType"`              // No description.
	Request          *AffectedRequest              `json:"request,omitempty"`          // No description.
	ViolatingNodeID  *dom.BackendNodeID            `json:"violatingNodeId,omitempty"`  // No description.
	InvalidParameter *string                       `json:"invalidParameter,omitempty"` // No description.
}

// QuirksModeIssueDetails Details for issues about documents in Quirks Mode or
// Limited Quirks Mode that affects page layouting.
type QuirksModeIssueDetails struct {
	IsLimitedQuirksMode bool              `json:"isLimitedQuirksMode"` // If false, it means the document's mode is "quirks" instead of "limited-quirks".
	DocumentNodeID      dom.BackendNodeID `json:"documentNodeId"`      // No description.
	URL                 string            `json:"url"`                 // No description.
	FrameID             page.FrameID      `json:"frameId"`             // No description.
	LoaderID            network.LoaderID  `json:"loaderId"`            // No description.
}

// NavigatorUserAgentIssueDetails
//
// Deprecated:
type NavigatorUserAgentIssueDetails struct {
	URL      string              `json:"url"`                // No description.
	Location *SourceCodeLocation `json:"location,omitempty"` // No description.
}

// SharedDictionaryIssueDetails
type SharedDictionaryIssueDetails struct {
	SharedDictionaryError SharedDictionaryError `json:"sharedDictionaryError"` // No description.
	Request               AffectedRequest       `json:"request"`               // No description.
}

// GenericIssueErrorType
type GenericIssueErrorType string

// GenericIssueErrorType as enums.
const (
	GenericIssueErrorTypeNotSet                                                     GenericIssueErrorType = ""
	GenericIssueErrorTypeFormLabelForNameError                                      GenericIssueErrorType = "FormLabelForNameError"
	GenericIssueErrorTypeFormDuplicateIDForInputError                               GenericIssueErrorType = "FormDuplicateIdForInputError"
	GenericIssueErrorTypeFormInputWithNoLabelError                                  GenericIssueErrorType = "FormInputWithNoLabelError"
	GenericIssueErrorTypeFormAutocompleteAttributeEmptyError                        GenericIssueErrorType = "FormAutocompleteAttributeEmptyError"
	GenericIssueErrorTypeFormEmptyIDAndNameAttributesForInputError                  GenericIssueErrorType = "FormEmptyIdAndNameAttributesForInputError"
	GenericIssueErrorTypeFormAriaLabelledByToNonExistingID                          GenericIssueErrorType = "FormAriaLabelledByToNonExistingId"
	GenericIssueErrorTypeFormInputAssignedAutocompleteValueToIDOrNameAttributeError GenericIssueErrorType = "FormInputAssignedAutocompleteValueToIdOrNameAttributeError"
	GenericIssueErrorTypeFormLabelHasNeitherForNorNestedInput                       GenericIssueErrorType = "FormLabelHasNeitherForNorNestedInput"
	GenericIssueErrorTypeFormLabelForMatchesNonExistingIDError                      GenericIssueErrorType = "FormLabelForMatchesNonExistingIdError"
	GenericIssueErrorTypeFormInputHasWrongButWellIntendedAutocompleteValueError     GenericIssueErrorType = "FormInputHasWrongButWellIntendedAutocompleteValueError"
	GenericIssueErrorTypeResponseWasBlockedByORB                                    GenericIssueErrorType = "ResponseWasBlockedByORB"
)

func (e GenericIssueErrorType) Valid() bool {
	switch e {
	case "FormLabelForNameError", "FormDuplicateIdForInputError", "FormInputWithNoLabelError", "FormAutocompleteAttributeEmptyError", "FormEmptyIdAndNameAttributesForInputError", "FormAriaLabelledByToNonExistingId", "FormInputAssignedAutocompleteValueToIdOrNameAttributeError", "FormLabelHasNeitherForNorNestedInput", "FormLabelForMatchesNonExistingIdError", "FormInputHasWrongButWellIntendedAutocompleteValueError", "ResponseWasBlockedByORB":
		return true
	default:
		return false
	}
}

func (e GenericIssueErrorType) String() string {
	return string(e)
}

// GenericIssueDetails Depending on the concrete errorType, different
// properties are set.
type GenericIssueDetails struct {
	ErrorType              GenericIssueErrorType `json:"errorType"`                        // Issues with the same errorType are aggregated in the frontend.
	FrameID                *page.FrameID         `json:"frameId,omitempty"`                // No description.
	ViolatingNodeID        *dom.BackendNodeID    `json:"violatingNodeId,omitempty"`        // No description.
	ViolatingNodeAttribute *string               `json:"violatingNodeAttribute,omitempty"` // No description.
	Request                *AffectedRequest      `json:"request,omitempty"`                // No description.
}

// DeprecationIssueDetails This issue tracks information needed to print a
// deprecation message.
// https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/frame/third_party/blink/renderer/core/frame/deprecation/README.md
type DeprecationIssueDetails struct {
	AffectedFrame      *AffectedFrame     `json:"affectedFrame,omitempty"` // No description.
	SourceCodeLocation SourceCodeLocation `json:"sourceCodeLocation"`      // No description.
	Type               string             `json:"type"`                    // One of the deprecation names from third_party/blink/renderer/core/frame/deprecation/deprecation.json5
}

// BounceTrackingIssueDetails This issue warns about sites in the redirect
// chain of a finished navigation that may be flagged as trackers and have
// their state cleared if they don't receive a user interaction. Note that in
// this context 'site' means eTLD+1. For example, if the URL
// `https://example.test:80/bounce` was in the redirect chain, the site
// reported would be `example.test`.
type BounceTrackingIssueDetails struct {
	TrackingSites []string `json:"trackingSites"` // No description.
}

// CookieDeprecationMetadataIssueDetails This issue warns about third-party
// sites that are accessing cookies on the current page, and have been
// permitted due to having a global metadata grant. Note that in this context
// 'site' means eTLD+1. For example, if the URL
// `https://example.test:80/web_page` was accessing cookies, the site reported
// would be `example.test`.
type CookieDeprecationMetadataIssueDetails struct {
	AllowedSites     []string        `json:"allowedSites"`     // No description.
	OptOutPercentage float64         `json:"optOutPercentage"` // No description.
	IsOptOutTopLevel bool            `json:"isOptOutTopLevel"` // No description.
	Operation        CookieOperation `json:"operation"`        // No description.
}

// ClientHintIssueReason
type ClientHintIssueReason string

// ClientHintIssueReason as enums.
const (
	ClientHintIssueReasonNotSet                        ClientHintIssueReason = ""
	ClientHintIssueReasonMetaTagAllowListInvalidOrigin ClientHintIssueReason = "MetaTagAllowListInvalidOrigin"
	ClientHintIssueReasonMetaTagModifiedHTML           ClientHintIssueReason = "MetaTagModifiedHTML"
)

func (e ClientHintIssueReason) Valid() bool {
	switch e {
	case "MetaTagAllowListInvalidOrigin", "MetaTagModifiedHTML":
		return true
	default:
		return false
	}
}

func (e ClientHintIssueReason) String() string {
	return string(e)
}

// FederatedAuthRequestIssueDetails
type FederatedAuthRequestIssueDetails struct {
	FederatedAuthRequestIssueReason FederatedAuthRequestIssueReason `json:"federatedAuthRequestIssueReason"` // No description.
}

// FederatedAuthRequestIssueReason Represents the failure reason when a
// federated authentication reason fails. Should be updated alongside
// RequestIdTokenStatus in
// third_party/blink/public/mojom/devtools/inspector_issue.mojom to include all
// cases except for success.
type FederatedAuthRequestIssueReason string

// FederatedAuthRequestIssueReason as enums.
const (
	FederatedAuthRequestIssueReasonNotSet                           FederatedAuthRequestIssueReason = ""
	FederatedAuthRequestIssueReasonShouldEmbargo                    FederatedAuthRequestIssueReason = "ShouldEmbargo"
	FederatedAuthRequestIssueReasonTooManyRequests                  FederatedAuthRequestIssueReason = "TooManyRequests"
	FederatedAuthRequestIssueReasonWellKnownHTTPNotFound            FederatedAuthRequestIssueReason = "WellKnownHttpNotFound"
	FederatedAuthRequestIssueReasonWellKnownNoResponse              FederatedAuthRequestIssueReason = "WellKnownNoResponse"
	FederatedAuthRequestIssueReasonWellKnownInvalidResponse         FederatedAuthRequestIssueReason = "WellKnownInvalidResponse"
	FederatedAuthRequestIssueReasonWellKnownListEmpty               FederatedAuthRequestIssueReason = "WellKnownListEmpty"
	FederatedAuthRequestIssueReasonWellKnownInvalidContentType      FederatedAuthRequestIssueReason = "WellKnownInvalidContentType"
	FederatedAuthRequestIssueReasonConfigNotInWellKnown             FederatedAuthRequestIssueReason = "ConfigNotInWellKnown"
	FederatedAuthRequestIssueReasonWellKnownTooBig                  FederatedAuthRequestIssueReason = "WellKnownTooBig"
	FederatedAuthRequestIssueReasonConfigHTTPNotFound               FederatedAuthRequestIssueReason = "ConfigHttpNotFound"
	FederatedAuthRequestIssueReasonConfigNoResponse                 FederatedAuthRequestIssueReason = "ConfigNoResponse"
	FederatedAuthRequestIssueReasonConfigInvalidResponse            FederatedAuthRequestIssueReason = "ConfigInvalidResponse"
	FederatedAuthRequestIssueReasonConfigInvalidContentType         FederatedAuthRequestIssueReason = "ConfigInvalidContentType"
	FederatedAuthRequestIssueReasonClientMetadataHTTPNotFound       FederatedAuthRequestIssueReason = "ClientMetadataHttpNotFound"
	FederatedAuthRequestIssueReasonClientMetadataNoResponse         FederatedAuthRequestIssueReason = "ClientMetadataNoResponse"
	FederatedAuthRequestIssueReasonClientMetadataInvalidResponse    FederatedAuthRequestIssueReason = "ClientMetadataInvalidResponse"
	FederatedAuthRequestIssueReasonClientMetadataInvalidContentType FederatedAuthRequestIssueReason = "ClientMetadataInvalidContentType"
	FederatedAuthRequestIssueReasonIDPNotPotentiallyTrustworthy     FederatedAuthRequestIssueReason = "IdpNotPotentiallyTrustworthy"
	FederatedAuthRequestIssueReasonDisabledInSettings               FederatedAuthRequestIssueReason = "DisabledInSettings"
	FederatedAuthRequestIssueReasonDisabledInFlags                  FederatedAuthRequestIssueReason = "DisabledInFlags"
	FederatedAuthRequestIssueReasonErrorFetchingSignin              FederatedAuthRequestIssueReason = "ErrorFetchingSignin"
	FederatedAuthRequestIssueReasonInvalidSigninResponse            FederatedAuthRequestIssueReason = "InvalidSigninResponse"
	FederatedAuthRequestIssueReasonAccountsHTTPNotFound             FederatedAuthRequestIssueReason = "AccountsHttpNotFound"
	FederatedAuthRequestIssueReasonAccountsNoResponse               FederatedAuthRequestIssueReason = "AccountsNoResponse"
	FederatedAuthRequestIssueReasonAccountsInvalidResponse          FederatedAuthRequestIssueReason = "AccountsInvalidResponse"
	FederatedAuthRequestIssueReasonAccountsListEmpty                FederatedAuthRequestIssueReason = "AccountsListEmpty"
	FederatedAuthRequestIssueReasonAccountsInvalidContentType       FederatedAuthRequestIssueReason = "AccountsInvalidContentType"
	FederatedAuthRequestIssueReasonIDTokenHTTPNotFound              FederatedAuthRequestIssueReason = "IdTokenHttpNotFound"
	FederatedAuthRequestIssueReasonIDTokenNoResponse                FederatedAuthRequestIssueReason = "IdTokenNoResponse"
	FederatedAuthRequestIssueReasonIDTokenInvalidResponse           FederatedAuthRequestIssueReason = "IdTokenInvalidResponse"
	FederatedAuthRequestIssueReasonIDTokenIDPErrorResponse          FederatedAuthRequestIssueReason = "IdTokenIdpErrorResponse"
	FederatedAuthRequestIssueReasonIDTokenCrossSiteIDPErrorResponse FederatedAuthRequestIssueReason = "IdTokenCrossSiteIdpErrorResponse"
	FederatedAuthRequestIssueReasonIDTokenInvalidRequest            FederatedAuthRequestIssueReason = "IdTokenInvalidRequest"
	FederatedAuthRequestIssueReasonIDTokenInvalidContentType        FederatedAuthRequestIssueReason = "IdTokenInvalidContentType"
	FederatedAuthRequestIssueReasonErrorIDToken                     FederatedAuthRequestIssueReason = "ErrorIdToken"
	FederatedAuthRequestIssueReasonCanceled                         FederatedAuthRequestIssueReason = "Canceled"
	FederatedAuthRequestIssueReasonRPPageNotVisible                 FederatedAuthRequestIssueReason = "RpPageNotVisible"
	FederatedAuthRequestIssueReasonSilentMediationFailure           FederatedAuthRequestIssueReason = "SilentMediationFailure"
	FederatedAuthRequestIssueReasonThirdPartyCookiesBlocked         FederatedAuthRequestIssueReason = "ThirdPartyCookiesBlocked"
	FederatedAuthRequestIssueReasonNotSignedInWithIDP               FederatedAuthRequestIssueReason = "NotSignedInWithIdp"
	FederatedAuthRequestIssueReasonMissingTransientUserActivation   FederatedAuthRequestIssueReason = "MissingTransientUserActivation"
	FederatedAuthRequestIssueReasonReplacedByButtonMode             FederatedAuthRequestIssueReason = "ReplacedByButtonMode"
	FederatedAuthRequestIssueReasonInvalidFieldsSpecified           FederatedAuthRequestIssueReason = "InvalidFieldsSpecified"
	FederatedAuthRequestIssueReasonRelyingPartyOriginIsOpaque       FederatedAuthRequestIssueReason = "RelyingPartyOriginIsOpaque"
	FederatedAuthRequestIssueReasonTypeNotMatching                  FederatedAuthRequestIssueReason = "TypeNotMatching"
)

func (e FederatedAuthRequestIssueReason) Valid() bool {
	switch e {
	case "ShouldEmbargo", "TooManyRequests", "WellKnownHttpNotFound", "WellKnownNoResponse", "WellKnownInvalidResponse", "WellKnownListEmpty", "WellKnownInvalidContentType", "ConfigNotInWellKnown", "WellKnownTooBig", "ConfigHttpNotFound", "ConfigNoResponse", "ConfigInvalidResponse", "ConfigInvalidContentType", "ClientMetadataHttpNotFound", "ClientMetadataNoResponse", "ClientMetadataInvalidResponse", "ClientMetadataInvalidContentType", "IdpNotPotentiallyTrustworthy", "DisabledInSettings", "DisabledInFlags", "ErrorFetchingSignin", "InvalidSigninResponse", "AccountsHttpNotFound", "AccountsNoResponse", "AccountsInvalidResponse", "AccountsListEmpty", "AccountsInvalidContentType", "IdTokenHttpNotFound", "IdTokenNoResponse", "IdTokenInvalidResponse", "IdTokenIdpErrorResponse", "IdTokenCrossSiteIdpErrorResponse", "IdTokenInvalidRequest", "IdTokenInvalidContentType", "ErrorIdToken", "Canceled", "RpPageNotVisible", "SilentMediationFailure", "ThirdPartyCookiesBlocked", "NotSignedInWithIdp", "MissingTransientUserActivation", "ReplacedByButtonMode", "InvalidFieldsSpecified", "RelyingPartyOriginIsOpaque", "TypeNotMatching":
		return true
	default:
		return false
	}
}

func (e FederatedAuthRequestIssueReason) String() string {
	return string(e)
}

// FederatedAuthUserInfoRequestIssueDetails
type FederatedAuthUserInfoRequestIssueDetails struct {
	FederatedAuthUserInfoRequestIssueReason FederatedAuthUserInfoRequestIssueReason `json:"federatedAuthUserInfoRequestIssueReason"` // No description.
}

// FederatedAuthUserInfoRequestIssueReason Represents the failure reason when
// a getUserInfo() call fails. Should be updated alongside
// FederatedAuthUserInfoRequestResult in
// third_party/blink/public/mojom/devtools/inspector_issue.mojom.
type FederatedAuthUserInfoRequestIssueReason string

// FederatedAuthUserInfoRequestIssueReason as enums.
const (
	FederatedAuthUserInfoRequestIssueReasonNotSet                             FederatedAuthUserInfoRequestIssueReason = ""
	FederatedAuthUserInfoRequestIssueReasonNotSameOrigin                      FederatedAuthUserInfoRequestIssueReason = "NotSameOrigin"
	FederatedAuthUserInfoRequestIssueReasonNotIframe                          FederatedAuthUserInfoRequestIssueReason = "NotIframe"
	FederatedAuthUserInfoRequestIssueReasonNotPotentiallyTrustworthy          FederatedAuthUserInfoRequestIssueReason = "NotPotentiallyTrustworthy"
	FederatedAuthUserInfoRequestIssueReasonNoAPIPermission                    FederatedAuthUserInfoRequestIssueReason = "NoApiPermission"
	FederatedAuthUserInfoRequestIssueReasonNotSignedInWithIDP                 FederatedAuthUserInfoRequestIssueReason = "NotSignedInWithIdp"
	FederatedAuthUserInfoRequestIssueReasonNoAccountSharingPermission         FederatedAuthUserInfoRequestIssueReason = "NoAccountSharingPermission"
	FederatedAuthUserInfoRequestIssueReasonInvalidConfigOrWellKnown           FederatedAuthUserInfoRequestIssueReason = "InvalidConfigOrWellKnown"
	FederatedAuthUserInfoRequestIssueReasonInvalidAccountsResponse            FederatedAuthUserInfoRequestIssueReason = "InvalidAccountsResponse"
	FederatedAuthUserInfoRequestIssueReasonNoReturningUserFromFetchedAccounts FederatedAuthUserInfoRequestIssueReason = "NoReturningUserFromFetchedAccounts"
)

func (e FederatedAuthUserInfoRequestIssueReason) Valid() bool {
	switch e {
	case "NotSameOrigin", "NotIframe", "NotPotentiallyTrustworthy", "NoApiPermission", "NotSignedInWithIdp", "NoAccountSharingPermission", "InvalidConfigOrWellKnown", "InvalidAccountsResponse", "NoReturningUserFromFetchedAccounts":
		return true
	default:
		return false
	}
}

func (e FederatedAuthUserInfoRequestIssueReason) String() string {
	return string(e)
}

// ClientHintIssueDetails This issue tracks client hints related issues. It's
// used to deprecate old features, encourage the use of new ones, and provide
// general guidance.
type ClientHintIssueDetails struct {
	SourceCodeLocation    SourceCodeLocation    `json:"sourceCodeLocation"`    // No description.
	ClientHintIssueReason ClientHintIssueReason `json:"clientHintIssueReason"` // No description.
}

// FailedRequestInfo
type FailedRequestInfo struct {
	URL            string             `json:"url"`                 // The URL that failed to load.
	FailureMessage string             `json:"failureMessage"`      // The failure message for the failed request.
	RequestID      *network.RequestID `json:"requestId,omitempty"` // No description.
}

// StyleSheetLoadingIssueReason
type StyleSheetLoadingIssueReason string

// StyleSheetLoadingIssueReason as enums.
const (
	StyleSheetLoadingIssueReasonNotSet         StyleSheetLoadingIssueReason = ""
	StyleSheetLoadingIssueReasonLateImportRule StyleSheetLoadingIssueReason = "LateImportRule"
	StyleSheetLoadingIssueReasonRequestFailed  StyleSheetLoadingIssueReason = "RequestFailed"
)

func (e StyleSheetLoadingIssueReason) Valid() bool {
	switch e {
	case "LateImportRule", "RequestFailed":
		return true
	default:
		return false
	}
}

func (e StyleSheetLoadingIssueReason) String() string {
	return string(e)
}

// StylesheetLoadingIssueDetails This issue warns when a referenced stylesheet
// couldn't be loaded.
type StylesheetLoadingIssueDetails struct {
	SourceCodeLocation           SourceCodeLocation           `json:"sourceCodeLocation"`           // Source code position that referenced the failing stylesheet.
	StyleSheetLoadingIssueReason StyleSheetLoadingIssueReason `json:"styleSheetLoadingIssueReason"` // Reason why the stylesheet couldn't be loaded.
	FailedRequestInfo            *FailedRequestInfo           `json:"failedRequestInfo,omitempty"`  // Contains additional info when the failure was due to a request.
}

// PropertyRuleIssueReason
type PropertyRuleIssueReason string

// PropertyRuleIssueReason as enums.
const (
	PropertyRuleIssueReasonNotSet              PropertyRuleIssueReason = ""
	PropertyRuleIssueReasonInvalidSyntax       PropertyRuleIssueReason = "InvalidSyntax"
	PropertyRuleIssueReasonInvalidInitialValue PropertyRuleIssueReason = "InvalidInitialValue"
	PropertyRuleIssueReasonInvalidInherits     PropertyRuleIssueReason = "InvalidInherits"
	PropertyRuleIssueReasonInvalidName         PropertyRuleIssueReason = "InvalidName"
)

func (e PropertyRuleIssueReason) Valid() bool {
	switch e {
	case "InvalidSyntax", "InvalidInitialValue", "InvalidInherits", "InvalidName":
		return true
	default:
		return false
	}
}

func (e PropertyRuleIssueReason) String() string {
	return string(e)
}

// PropertyRuleIssueDetails This issue warns about errors in property rules
// that lead to property registrations being ignored.
type PropertyRuleIssueDetails struct {
	SourceCodeLocation      SourceCodeLocation      `json:"sourceCodeLocation"`      // Source code position of the property rule.
	PropertyRuleIssueReason PropertyRuleIssueReason `json:"propertyRuleIssueReason"` // Reason why the property rule was discarded.
	PropertyValue           *string                 `json:"propertyValue,omitempty"` // The value of the property rule property that failed to parse
}

// InspectorIssueCode A unique identifier for the type of issue. Each type may
// use one of the optional fields in InspectorIssueDetails to convey more
// specific information about the kind of issue.
type InspectorIssueCode string

// InspectorIssueCode as enums.
const (
	InspectorIssueCodeNotSet                            InspectorIssueCode = ""
	InspectorIssueCodeCookieIssue                       InspectorIssueCode = "CookieIssue"
	InspectorIssueCodeMixedContentIssue                 InspectorIssueCode = "MixedContentIssue"
	InspectorIssueCodeBlockedByResponseIssue            InspectorIssueCode = "BlockedByResponseIssue"
	InspectorIssueCodeHeavyAdIssue                      InspectorIssueCode = "HeavyAdIssue"
	InspectorIssueCodeContentSecurityPolicyIssue        InspectorIssueCode = "ContentSecurityPolicyIssue"
	InspectorIssueCodeSharedArrayBufferIssue            InspectorIssueCode = "SharedArrayBufferIssue"
	InspectorIssueCodeLowTextContrastIssue              InspectorIssueCode = "LowTextContrastIssue"
	InspectorIssueCodeCORSIssue                         InspectorIssueCode = "CorsIssue"
	InspectorIssueCodeAttributionReportingIssue         InspectorIssueCode = "AttributionReportingIssue"
	InspectorIssueCodeQuirksModeIssue                   InspectorIssueCode = "QuirksModeIssue"
	InspectorIssueCodeNavigatorUserAgentIssue           InspectorIssueCode = "NavigatorUserAgentIssue"
	InspectorIssueCodeGenericIssue                      InspectorIssueCode = "GenericIssue"
	InspectorIssueCodeDeprecationIssue                  InspectorIssueCode = "DeprecationIssue"
	InspectorIssueCodeClientHintIssue                   InspectorIssueCode = "ClientHintIssue"
	InspectorIssueCodeFederatedAuthRequestIssue         InspectorIssueCode = "FederatedAuthRequestIssue"
	InspectorIssueCodeBounceTrackingIssue               InspectorIssueCode = "BounceTrackingIssue"
	InspectorIssueCodeCookieDeprecationMetadataIssue    InspectorIssueCode = "CookieDeprecationMetadataIssue"
	InspectorIssueCodeStylesheetLoadingIssue            InspectorIssueCode = "StylesheetLoadingIssue"
	InspectorIssueCodeFederatedAuthUserInfoRequestIssue InspectorIssueCode = "FederatedAuthUserInfoRequestIssue"
	InspectorIssueCodePropertyRuleIssue                 InspectorIssueCode = "PropertyRuleIssue"
	InspectorIssueCodeSharedDictionaryIssue             InspectorIssueCode = "SharedDictionaryIssue"
)

func (e InspectorIssueCode) Valid() bool {
	switch e {
	case "CookieIssue", "MixedContentIssue", "BlockedByResponseIssue", "HeavyAdIssue", "ContentSecurityPolicyIssue", "SharedArrayBufferIssue", "LowTextContrastIssue", "CorsIssue", "AttributionReportingIssue", "QuirksModeIssue", "NavigatorUserAgentIssue", "GenericIssue", "DeprecationIssue", "ClientHintIssue", "FederatedAuthRequestIssue", "BounceTrackingIssue", "CookieDeprecationMetadataIssue", "StylesheetLoadingIssue", "FederatedAuthUserInfoRequestIssue", "PropertyRuleIssue", "SharedDictionaryIssue":
		return true
	default:
		return false
	}
}

func (e InspectorIssueCode) String() string {
	return string(e)
}

// InspectorIssueDetails This struct holds a list of optional fields with
// additional information specific to the kind of issue. When adding a new
// issue code, please also add a new optional field to this type.
type InspectorIssueDetails struct {
	CookieIssueDetails                *CookieIssueDetails                `json:"cookieIssueDetails,omitempty"`                // No description.
	MixedContentIssueDetails          *MixedContentIssueDetails          `json:"mixedContentIssueDetails,omitempty"`          // No description.
	BlockedByResponseIssueDetails     *BlockedByResponseIssueDetails     `json:"blockedByResponseIssueDetails,omitempty"`     // No description.
	HeavyAdIssueDetails               *HeavyAdIssueDetails               `json:"heavyAdIssueDetails,omitempty"`               // No description.
	ContentSecurityPolicyIssueDetails *ContentSecurityPolicyIssueDetails `json:"contentSecurityPolicyIssueDetails,omitempty"` // No description.
	SharedArrayBufferIssueDetails     *SharedArrayBufferIssueDetails     `json:"sharedArrayBufferIssueDetails,omitempty"`     // No description.
	LowTextContrastIssueDetails       *LowTextContrastIssueDetails       `json:"lowTextContrastIssueDetails,omitempty"`       // No description.
	CORSIssueDetails                  *CORSIssueDetails                  `json:"corsIssueDetails,omitempty"`                  // No description.
	AttributionReportingIssueDetails  *AttributionReportingIssueDetails  `json:"attributionReportingIssueDetails,omitempty"`  // No description.
	QuirksModeIssueDetails            *QuirksModeIssueDetails            `json:"quirksModeIssueDetails,omitempty"`            // No description.
	// NavigatorUserAgentIssueDetails is deprecated.
	//
	// Deprecated: This property should not be used.
	NavigatorUserAgentIssueDetails           *NavigatorUserAgentIssueDetails           `json:"navigatorUserAgentIssueDetails,omitempty"`
	GenericIssueDetails                      *GenericIssueDetails                      `json:"genericIssueDetails,omitempty"`                      // No description.
	DeprecationIssueDetails                  *DeprecationIssueDetails                  `json:"deprecationIssueDetails,omitempty"`                  // No description.
	ClientHintIssueDetails                   *ClientHintIssueDetails                   `json:"clientHintIssueDetails,omitempty"`                   // No description.
	FederatedAuthRequestIssueDetails         *FederatedAuthRequestIssueDetails         `json:"federatedAuthRequestIssueDetails,omitempty"`         // No description.
	BounceTrackingIssueDetails               *BounceTrackingIssueDetails               `json:"bounceTrackingIssueDetails,omitempty"`               // No description.
	CookieDeprecationMetadataIssueDetails    *CookieDeprecationMetadataIssueDetails    `json:"cookieDeprecationMetadataIssueDetails,omitempty"`    // No description.
	StylesheetLoadingIssueDetails            *StylesheetLoadingIssueDetails            `json:"stylesheetLoadingIssueDetails,omitempty"`            // No description.
	PropertyRuleIssueDetails                 *PropertyRuleIssueDetails                 `json:"propertyRuleIssueDetails,omitempty"`                 // No description.
	FederatedAuthUserInfoRequestIssueDetails *FederatedAuthUserInfoRequestIssueDetails `json:"federatedAuthUserInfoRequestIssueDetails,omitempty"` // No description.
	SharedDictionaryIssueDetails             *SharedDictionaryIssueDetails             `json:"sharedDictionaryIssueDetails,omitempty"`             // No description.
}

// IssueID A unique id for a DevTools inspector issue. Allows other entities
// (e.g. exceptions, CDP message, console messages, etc.) to reference an
// issue.
type IssueID string

// InspectorIssue An inspector issue reported from the back-end.
type InspectorIssue struct {
	Code    InspectorIssueCode    `json:"code"`              // No description.
	Details InspectorIssueDetails `json:"details"`           // No description.
	IssueID *IssueID              `json:"issueId,omitempty"` // A unique id for this issue. May be omitted if no other entity (e.g. exception, CDP message, etc.) is referencing this issue.
}
