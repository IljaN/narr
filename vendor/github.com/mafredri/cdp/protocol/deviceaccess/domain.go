// Code generated by cdpgen. DO NOT EDIT.

// Package deviceaccess implements the DeviceAccess domain.
package deviceaccess

import (
	"context"

	"github.com/mafredri/cdp/protocol/internal"
	"github.com/mafredri/cdp/rpcc"
)

// domainClient is a client for the DeviceAccess domain.
type domainClient struct{ conn *rpcc.Conn }

// NewClient returns a client for the DeviceAccess domain with the connection set to conn.
func NewClient(conn *rpcc.Conn) *domainClient {
	return &domainClient{conn: conn}
}

// Enable invokes the DeviceAccess method. Enable events in this domain.
func (d *domainClient) Enable(ctx context.Context) (err error) {
	err = rpcc.Invoke(ctx, "DeviceAccess.enable", nil, nil, d.conn)
	if err != nil {
		err = &internal.OpError{Domain: "DeviceAccess", Op: "Enable", Err: err}
	}
	return
}

// Disable invokes the DeviceAccess method. Disable events in this domain.
func (d *domainClient) Disable(ctx context.Context) (err error) {
	err = rpcc.Invoke(ctx, "DeviceAccess.disable", nil, nil, d.conn)
	if err != nil {
		err = &internal.OpError{Domain: "DeviceAccess", Op: "Disable", Err: err}
	}
	return
}

// SelectPrompt invokes the DeviceAccess method. Select a device in response
// to a DeviceAccess.deviceRequestPrompted event.
func (d *domainClient) SelectPrompt(ctx context.Context, args *SelectPromptArgs) (err error) {
	if args != nil {
		err = rpcc.Invoke(ctx, "DeviceAccess.selectPrompt", args, nil, d.conn)
	} else {
		err = rpcc.Invoke(ctx, "DeviceAccess.selectPrompt", nil, nil, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "DeviceAccess", Op: "SelectPrompt", Err: err}
	}
	return
}

// CancelPrompt invokes the DeviceAccess method. Cancel a prompt in response
// to a DeviceAccess.deviceRequestPrompted event.
func (d *domainClient) CancelPrompt(ctx context.Context, args *CancelPromptArgs) (err error) {
	if args != nil {
		err = rpcc.Invoke(ctx, "DeviceAccess.cancelPrompt", args, nil, d.conn)
	} else {
		err = rpcc.Invoke(ctx, "DeviceAccess.cancelPrompt", nil, nil, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "DeviceAccess", Op: "CancelPrompt", Err: err}
	}
	return
}

func (d *domainClient) DeviceRequestPrompted(ctx context.Context) (DeviceRequestPromptedClient, error) {
	s, err := rpcc.NewStream(ctx, "DeviceAccess.deviceRequestPrompted", d.conn)
	if err != nil {
		return nil, err
	}
	return &deviceRequestPromptedClient{Stream: s}, nil
}

type deviceRequestPromptedClient struct{ rpcc.Stream }

// GetStream returns the original Stream for use with cdp.Sync.
func (c *deviceRequestPromptedClient) GetStream() rpcc.Stream { return c.Stream }

func (c *deviceRequestPromptedClient) Recv() (*DeviceRequestPromptedReply, error) {
	event := new(DeviceRequestPromptedReply)
	if err := c.RecvMsg(event); err != nil {
		return nil, &internal.OpError{Domain: "DeviceAccess", Op: "DeviceRequestPrompted Recv", Err: err}
	}
	return event, nil
}
