// Code generated by cdpgen. DO NOT EDIT.

// Package preload implements the Preload domain.
package preload

import (
	"context"

	"github.com/mafredri/cdp/protocol/internal"
	"github.com/mafredri/cdp/rpcc"
)

// domainClient is a client for the Preload domain.
type domainClient struct{ conn *rpcc.Conn }

// NewClient returns a client for the Preload domain with the connection set to conn.
func NewClient(conn *rpcc.Conn) *domainClient {
	return &domainClient{conn: conn}
}

// Enable invokes the Preload method.
func (d *domainClient) Enable(ctx context.Context) (err error) {
	err = rpcc.Invoke(ctx, "Preload.enable", nil, nil, d.conn)
	if err != nil {
		err = &internal.OpError{Domain: "Preload", Op: "Enable", Err: err}
	}
	return
}

// Disable invokes the Preload method.
func (d *domainClient) Disable(ctx context.Context) (err error) {
	err = rpcc.Invoke(ctx, "Preload.disable", nil, nil, d.conn)
	if err != nil {
		err = &internal.OpError{Domain: "Preload", Op: "Disable", Err: err}
	}
	return
}

func (d *domainClient) RuleSetUpdated(ctx context.Context) (RuleSetUpdatedClient, error) {
	s, err := rpcc.NewStream(ctx, "Preload.ruleSetUpdated", d.conn)
	if err != nil {
		return nil, err
	}
	return &ruleSetUpdatedClient{Stream: s}, nil
}

type ruleSetUpdatedClient struct{ rpcc.Stream }

// GetStream returns the original Stream for use with cdp.Sync.
func (c *ruleSetUpdatedClient) GetStream() rpcc.Stream { return c.Stream }

func (c *ruleSetUpdatedClient) Recv() (*RuleSetUpdatedReply, error) {
	event := new(RuleSetUpdatedReply)
	if err := c.RecvMsg(event); err != nil {
		return nil, &internal.OpError{Domain: "Preload", Op: "RuleSetUpdated Recv", Err: err}
	}
	return event, nil
}

func (d *domainClient) RuleSetRemoved(ctx context.Context) (RuleSetRemovedClient, error) {
	s, err := rpcc.NewStream(ctx, "Preload.ruleSetRemoved", d.conn)
	if err != nil {
		return nil, err
	}
	return &ruleSetRemovedClient{Stream: s}, nil
}

type ruleSetRemovedClient struct{ rpcc.Stream }

// GetStream returns the original Stream for use with cdp.Sync.
func (c *ruleSetRemovedClient) GetStream() rpcc.Stream { return c.Stream }

func (c *ruleSetRemovedClient) Recv() (*RuleSetRemovedReply, error) {
	event := new(RuleSetRemovedReply)
	if err := c.RecvMsg(event); err != nil {
		return nil, &internal.OpError{Domain: "Preload", Op: "RuleSetRemoved Recv", Err: err}
	}
	return event, nil
}

func (d *domainClient) PreloadEnabledStateUpdated(ctx context.Context) (EnabledStateUpdatedClient, error) {
	s, err := rpcc.NewStream(ctx, "Preload.preloadEnabledStateUpdated", d.conn)
	if err != nil {
		return nil, err
	}
	return &enabledStateUpdatedClient{Stream: s}, nil
}

type enabledStateUpdatedClient struct{ rpcc.Stream }

// GetStream returns the original Stream for use with cdp.Sync.
func (c *enabledStateUpdatedClient) GetStream() rpcc.Stream { return c.Stream }

func (c *enabledStateUpdatedClient) Recv() (*EnabledStateUpdatedReply, error) {
	event := new(EnabledStateUpdatedReply)
	if err := c.RecvMsg(event); err != nil {
		return nil, &internal.OpError{Domain: "Preload", Op: "PreloadEnabledStateUpdated Recv", Err: err}
	}
	return event, nil
}

func (d *domainClient) PrefetchStatusUpdated(ctx context.Context) (PrefetchStatusUpdatedClient, error) {
	s, err := rpcc.NewStream(ctx, "Preload.prefetchStatusUpdated", d.conn)
	if err != nil {
		return nil, err
	}
	return &prefetchStatusUpdatedClient{Stream: s}, nil
}

type prefetchStatusUpdatedClient struct{ rpcc.Stream }

// GetStream returns the original Stream for use with cdp.Sync.
func (c *prefetchStatusUpdatedClient) GetStream() rpcc.Stream { return c.Stream }

func (c *prefetchStatusUpdatedClient) Recv() (*PrefetchStatusUpdatedReply, error) {
	event := new(PrefetchStatusUpdatedReply)
	if err := c.RecvMsg(event); err != nil {
		return nil, &internal.OpError{Domain: "Preload", Op: "PrefetchStatusUpdated Recv", Err: err}
	}
	return event, nil
}

func (d *domainClient) PrerenderStatusUpdated(ctx context.Context) (PrerenderStatusUpdatedClient, error) {
	s, err := rpcc.NewStream(ctx, "Preload.prerenderStatusUpdated", d.conn)
	if err != nil {
		return nil, err
	}
	return &prerenderStatusUpdatedClient{Stream: s}, nil
}

type prerenderStatusUpdatedClient struct{ rpcc.Stream }

// GetStream returns the original Stream for use with cdp.Sync.
func (c *prerenderStatusUpdatedClient) GetStream() rpcc.Stream { return c.Stream }

func (c *prerenderStatusUpdatedClient) Recv() (*PrerenderStatusUpdatedReply, error) {
	event := new(PrerenderStatusUpdatedReply)
	if err := c.RecvMsg(event); err != nil {
		return nil, &internal.OpError{Domain: "Preload", Op: "PrerenderStatusUpdated Recv", Err: err}
	}
	return event, nil
}

func (d *domainClient) PreloadingAttemptSourcesUpdated(ctx context.Context) (AttemptSourcesUpdatedClient, error) {
	s, err := rpcc.NewStream(ctx, "Preload.preloadingAttemptSourcesUpdated", d.conn)
	if err != nil {
		return nil, err
	}
	return &attemptSourcesUpdatedClient{Stream: s}, nil
}

type attemptSourcesUpdatedClient struct{ rpcc.Stream }

// GetStream returns the original Stream for use with cdp.Sync.
func (c *attemptSourcesUpdatedClient) GetStream() rpcc.Stream { return c.Stream }

func (c *attemptSourcesUpdatedClient) Recv() (*AttemptSourcesUpdatedReply, error) {
	event := new(AttemptSourcesUpdatedReply)
	if err := c.RecvMsg(event); err != nil {
		return nil, &internal.OpError{Domain: "Preload", Op: "PreloadingAttemptSourcesUpdated Recv", Err: err}
	}
	return event, nil
}
