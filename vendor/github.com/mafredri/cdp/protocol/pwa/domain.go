// Code generated by cdpgen. DO NOT EDIT.

// Package pwa implements the PWA domain. This domain allows interacting with
// the browser to control PWAs.
package pwa

import (
	"context"

	"github.com/mafredri/cdp/protocol/internal"
	"github.com/mafredri/cdp/rpcc"
)

// domainClient is a client for the PWA domain. This domain allows interacting
// with the browser to control PWAs.
type domainClient struct{ conn *rpcc.Conn }

// NewClient returns a client for the PWA domain with the connection set to conn.
func NewClient(conn *rpcc.Conn) *domainClient {
	return &domainClient{conn: conn}
}

// GetOSAppState invokes the PWA method. Returns the following OS state for
// the given manifest id.
func (d *domainClient) GetOSAppState(ctx context.Context, args *GetOSAppStateArgs) (reply *GetOSAppStateReply, err error) {
	reply = new(GetOSAppStateReply)
	if args != nil {
		err = rpcc.Invoke(ctx, "PWA.getOsAppState", args, reply, d.conn)
	} else {
		err = rpcc.Invoke(ctx, "PWA.getOsAppState", nil, reply, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "PWA", Op: "GetOSAppState", Err: err}
	}
	return
}

// Install invokes the PWA method. Installs the given manifest identity,
// optionally using the given install_url or IWA bundle location.
//
// TODO(crbug.com/337872319) Support IWA to meet the following specific
// requirement. IWA-specific install description: If the manifest_id is
// isolated-app://, install_url_or_bundle_url is required, and can be either an
// http(s) URL or file:// URL pointing to a signed web bundle (.swbn). The
// .swbn file's signing key must correspond to manifest_id. If Chrome is not in
// IWA dev mode, the installation will fail, regardless of the state of the
// allowlist.
func (d *domainClient) Install(ctx context.Context, args *InstallArgs) (err error) {
	if args != nil {
		err = rpcc.Invoke(ctx, "PWA.install", args, nil, d.conn)
	} else {
		err = rpcc.Invoke(ctx, "PWA.install", nil, nil, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "PWA", Op: "Install", Err: err}
	}
	return
}

// Uninstall invokes the PWA method. Uninstalls the given manifest_id and
// closes any opened app windows.
func (d *domainClient) Uninstall(ctx context.Context, args *UninstallArgs) (err error) {
	if args != nil {
		err = rpcc.Invoke(ctx, "PWA.uninstall", args, nil, d.conn)
	} else {
		err = rpcc.Invoke(ctx, "PWA.uninstall", nil, nil, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "PWA", Op: "Uninstall", Err: err}
	}
	return
}

// Launch invokes the PWA method. Launches the installed web app, or an url in
// the same web app instead of the default start url if it is provided. Returns
// a page Target.TargetID which can be used to attach to via
// Target.attachToTarget or similar APIs.
func (d *domainClient) Launch(ctx context.Context, args *LaunchArgs) (reply *LaunchReply, err error) {
	reply = new(LaunchReply)
	if args != nil {
		err = rpcc.Invoke(ctx, "PWA.launch", args, reply, d.conn)
	} else {
		err = rpcc.Invoke(ctx, "PWA.launch", nil, reply, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "PWA", Op: "Launch", Err: err}
	}
	return
}

// LaunchFilesInApp invokes the PWA method. Opens one or more local files from
// an installed web app identified by its manifestId. The web app needs to have
// file handlers registered to process the files. The API returns one or more
// page Target.TargetIDs which can be used to attach to via
// Target.attachToTarget or similar APIs. If some files in the parameters
// cannot be handled by the web app, they will be ignored. If none of the files
// can be handled, this API returns an error. If no files are provided as the
// parameter, this API also returns an error.
//
// According to the definition of the file handlers in the manifest file, one
// Target.TargetID may represent a page handling one or more files. The order
// of the returned Target.TargetIDs is not guaranteed.
//
// TODO(crbug.com/339454034): Check the existences of the input files.
func (d *domainClient) LaunchFilesInApp(ctx context.Context, args *LaunchFilesInAppArgs) (reply *LaunchFilesInAppReply, err error) {
	reply = new(LaunchFilesInAppReply)
	if args != nil {
		err = rpcc.Invoke(ctx, "PWA.launchFilesInApp", args, reply, d.conn)
	} else {
		err = rpcc.Invoke(ctx, "PWA.launchFilesInApp", nil, reply, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "PWA", Op: "LaunchFilesInApp", Err: err}
	}
	return
}

// OpenCurrentPageInApp invokes the PWA method. Opens the current page in its
// web app identified by the manifest id, needs to be called on a page target.
// This function returns immediately without waiting for the app to finish
// loading.
func (d *domainClient) OpenCurrentPageInApp(ctx context.Context, args *OpenCurrentPageInAppArgs) (err error) {
	if args != nil {
		err = rpcc.Invoke(ctx, "PWA.openCurrentPageInApp", args, nil, d.conn)
	} else {
		err = rpcc.Invoke(ctx, "PWA.openCurrentPageInApp", nil, nil, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "PWA", Op: "OpenCurrentPageInApp", Err: err}
	}
	return
}

// ChangeAppUserSettings invokes the PWA method. Changes user settings of the
// web app identified by its manifestId. If the app was not installed, this
// command returns an error. Unset parameters will be ignored; unrecognized
// values will cause an error.
//
// Unlike the ones defined in the manifest files of the web apps, these
// settings are provided by the browser and controlled by the users, they
// impact the way the browser handling the web apps.
//
// See the comment of each parameter.
func (d *domainClient) ChangeAppUserSettings(ctx context.Context, args *ChangeAppUserSettingsArgs) (err error) {
	if args != nil {
		err = rpcc.Invoke(ctx, "PWA.changeAppUserSettings", args, nil, d.conn)
	} else {
		err = rpcc.Invoke(ctx, "PWA.changeAppUserSettings", nil, nil, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "PWA", Op: "ChangeAppUserSettings", Err: err}
	}
	return
}
