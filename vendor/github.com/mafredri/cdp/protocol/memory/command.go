// Code generated by cdpgen. DO NOT EDIT.

package memory

// GetDOMCountersReply represents the return values for GetDOMCounters in the Memory domain.
type GetDOMCountersReply struct {
	Documents        int `json:"documents"`        // No description.
	Nodes            int `json:"nodes"`            // No description.
	JSEventListeners int `json:"jsEventListeners"` // No description.
}

// GetDOMCountersForLeakDetectionReply represents the return values for GetDOMCountersForLeakDetection in the Memory domain.
type GetDOMCountersForLeakDetectionReply struct {
	Counters []DOMCounter `json:"counters"` // DOM object counters.
}

// SetPressureNotificationsSuppressedArgs represents the arguments for SetPressureNotificationsSuppressed in the Memory domain.
type SetPressureNotificationsSuppressedArgs struct {
	Suppressed bool `json:"suppressed"` // If true, memory pressure notifications will be suppressed.
}

// NewSetPressureNotificationsSuppressedArgs initializes SetPressureNotificationsSuppressedArgs with the required arguments.
func NewSetPressureNotificationsSuppressedArgs(suppressed bool) *SetPressureNotificationsSuppressedArgs {
	args := new(SetPressureNotificationsSuppressedArgs)
	args.Suppressed = suppressed
	return args
}

// SimulatePressureNotificationArgs represents the arguments for SimulatePressureNotification in the Memory domain.
type SimulatePressureNotificationArgs struct {
	Level PressureLevel `json:"level"` // Memory pressure level of the notification.
}

// NewSimulatePressureNotificationArgs initializes SimulatePressureNotificationArgs with the required arguments.
func NewSimulatePressureNotificationArgs(level PressureLevel) *SimulatePressureNotificationArgs {
	args := new(SimulatePressureNotificationArgs)
	args.Level = level
	return args
}

// StartSamplingArgs represents the arguments for StartSampling in the Memory domain.
type StartSamplingArgs struct {
	SamplingInterval   *int  `json:"samplingInterval,omitempty"`   // Average number of bytes between samples.
	SuppressRandomness *bool `json:"suppressRandomness,omitempty"` // Do not randomize intervals between samples.
}

// NewStartSamplingArgs initializes StartSamplingArgs with the required arguments.
func NewStartSamplingArgs() *StartSamplingArgs {
	args := new(StartSamplingArgs)

	return args
}

// SetSamplingInterval sets the SamplingInterval optional argument.
// Average number of bytes between samples.
func (a *StartSamplingArgs) SetSamplingInterval(samplingInterval int) *StartSamplingArgs {
	a.SamplingInterval = &samplingInterval
	return a
}

// SetSuppressRandomness sets the SuppressRandomness optional argument.
// Do not randomize intervals between samples.
func (a *StartSamplingArgs) SetSuppressRandomness(suppressRandomness bool) *StartSamplingArgs {
	a.SuppressRandomness = &suppressRandomness
	return a
}

// GetAllTimeSamplingProfileReply represents the return values for GetAllTimeSamplingProfile in the Memory domain.
type GetAllTimeSamplingProfileReply struct {
	Profile SamplingProfile `json:"profile"` // No description.
}

// GetBrowserSamplingProfileReply represents the return values for GetBrowserSamplingProfile in the Memory domain.
type GetBrowserSamplingProfileReply struct {
	Profile SamplingProfile `json:"profile"` // No description.
}

// GetSamplingProfileReply represents the return values for GetSamplingProfile in the Memory domain.
type GetSamplingProfileReply struct {
	Profile SamplingProfile `json:"profile"` // No description.
}
